// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file mystiko/data/v1/commitment.proto (package mystiko.data.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';

/**
 * @generated from enum mystiko.data.v1.CommitmentStatus
 */
export enum CommitmentStatus {
  /**
   * @generated from enum value: COMMITMENT_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: COMMITMENT_STATUS_SRC_SUCCEEDED = 1;
   */
  SRC_SUCCEEDED = 1,

  /**
   * @generated from enum value: COMMITMENT_STATUS_QUEUED = 2;
   */
  QUEUED = 2,

  /**
   * @generated from enum value: COMMITMENT_STATUS_INCLUDED = 3;
   */
  INCLUDED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(CommitmentStatus)
proto3.util.setEnumType(CommitmentStatus, 'mystiko.data.v1.CommitmentStatus', [
  { no: 0, name: 'COMMITMENT_STATUS_UNSPECIFIED' },
  { no: 1, name: 'COMMITMENT_STATUS_SRC_SUCCEEDED' },
  { no: 2, name: 'COMMITMENT_STATUS_QUEUED' },
  { no: 3, name: 'COMMITMENT_STATUS_INCLUDED' },
]);

/**
 * @generated from message mystiko.data.v1.Commitment
 */
export class Commitment extends Message<Commitment> {
  /**
   * @generated from field: bytes commitment_hash = 1;
   */
  commitmentHash = new Uint8Array(0);

  /**
   * @generated from field: mystiko.data.v1.CommitmentStatus status = 2;
   */
  status = CommitmentStatus.UNSPECIFIED;

  /**
   * @generated from field: uint64 block_number = 3;
   */
  blockNumber = protoInt64.zero;

  /**
   * @generated from field: optional uint64 included_block_number = 4;
   */
  includedBlockNumber?: bigint;

  /**
   * @generated from field: optional uint64 src_chain_block_number = 5;
   */
  srcChainBlockNumber?: bigint;

  /**
   * @generated from field: optional uint64 leaf_index = 6;
   */
  leafIndex?: bigint;

  /**
   * @generated from field: optional bytes rollup_fee = 7;
   */
  rollupFee?: Uint8Array;

  /**
   * @generated from field: optional bytes encrypted_note = 8;
   */
  encryptedNote?: Uint8Array;

  /**
   * @generated from field: optional bytes queued_transaction_hash = 9;
   */
  queuedTransactionHash?: Uint8Array;

  /**
   * @generated from field: optional bytes included_transaction_hash = 10;
   */
  includedTransactionHash?: Uint8Array;

  /**
   * @generated from field: optional bytes src_chain_transaction_hash = 11;
   */
  srcChainTransactionHash?: Uint8Array;

  constructor(data?: PartialMessage<Commitment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.data.v1.Commitment';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'commitment_hash', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: 'status', kind: 'enum', T: proto3.getEnumType(CommitmentStatus) },
    { no: 3, name: 'block_number', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: 'included_block_number', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: 'src_chain_block_number', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 6, name: 'leaf_index', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 7, name: 'rollup_fee', kind: 'scalar', T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 8, name: 'encrypted_note', kind: 'scalar', T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 9, name: 'queued_transaction_hash', kind: 'scalar', T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 10, name: 'included_transaction_hash', kind: 'scalar', T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 11, name: 'src_chain_transaction_hash', kind: 'scalar', T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Commitment {
    return new Commitment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Commitment {
    return new Commitment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Commitment {
    return new Commitment().fromJsonString(jsonString, options);
  }

  static equals(
    a: Commitment | PlainMessage<Commitment> | undefined,
    b: Commitment | PlainMessage<Commitment> | undefined,
  ): boolean {
    return proto3.util.equals(Commitment, a, b);
  }
}
