// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file mystiko/data/v1/contract.proto (package mystiko.data.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { Commitment } from './commitment_pb.js';
import { Nullifier } from './nullifier_pb.js';

/**
 * @generated from message mystiko.data.v1.ContractData
 */
export class ContractData extends Message<ContractData> {
  /**
   * @generated from field: bytes contract_address = 1;
   */
  contractAddress = new Uint8Array(0);

  /**
   * @generated from field: repeated mystiko.data.v1.Commitment commitments = 2;
   */
  commitments: Commitment[] = [];

  /**
   * @generated from field: repeated mystiko.data.v1.Nullifier nullifiers = 3;
   */
  nullifiers: Nullifier[] = [];

  constructor(data?: PartialMessage<ContractData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.data.v1.ContractData';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'contract_address', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: 'commitments', kind: 'message', T: Commitment, repeated: true },
    { no: 3, name: 'nullifiers', kind: 'message', T: Nullifier, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContractData {
    return new ContractData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContractData {
    return new ContractData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContractData {
    return new ContractData().fromJsonString(jsonString, options);
  }

  static equals(
    a: ContractData | PlainMessage<ContractData> | undefined,
    b: ContractData | PlainMessage<ContractData> | undefined,
  ): boolean {
    return proto3.util.equals(ContractData, a, b);
  }
}
