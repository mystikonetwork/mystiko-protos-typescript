// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file mystiko/loader/v1/loader.proto (package mystiko.loader.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { FetcherConfig, FetcherType } from './fetcher_pb.js';
import { ValidatorConfig, ValidatorType } from './validator_pb.js';
import { ConfigOptions } from '../../common/v1/config_pb.js';

/**
 * @generated from message mystiko.loader.v1.LoaderConfig
 */
export class LoaderConfig extends Message<LoaderConfig> {
  /**
   * @generated from field: map<uint32, mystiko.loader.v1.FetcherType> fetchers = 1;
   */
  fetchers: { [key: number]: FetcherType } = {};

  /**
   * @generated from field: map<uint32, mystiko.loader.v1.ValidatorType> validators = 2;
   */
  validators: { [key: number]: ValidatorType } = {};

  /**
   * @generated from field: optional mystiko.common.v1.ConfigOptions mystiko_config_options = 3;
   */
  mystikoConfigOptions?: ConfigOptions;

  /**
   * @generated from field: optional mystiko.loader.v1.FetcherConfig fetcher_config = 4;
   */
  fetcherConfig?: FetcherConfig;

  /**
   * @generated from field: optional mystiko.loader.v1.ValidatorConfig validator_config = 5;
   */
  validatorConfig?: ValidatorConfig;

  constructor(data?: PartialMessage<LoaderConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.loader.v1.LoaderConfig';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'fetchers',
      kind: 'map',
      K: 13 /* ScalarType.UINT32 */,
      V: { kind: 'enum', T: proto3.getEnumType(FetcherType) },
    },
    {
      no: 2,
      name: 'validators',
      kind: 'map',
      K: 13 /* ScalarType.UINT32 */,
      V: { kind: 'enum', T: proto3.getEnumType(ValidatorType) },
    },
    { no: 3, name: 'mystiko_config_options', kind: 'message', T: ConfigOptions, opt: true },
    { no: 4, name: 'fetcher_config', kind: 'message', T: FetcherConfig, opt: true },
    { no: 5, name: 'validator_config', kind: 'message', T: ValidatorConfig, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoaderConfig {
    return new LoaderConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoaderConfig {
    return new LoaderConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoaderConfig {
    return new LoaderConfig().fromJsonString(jsonString, options);
  }

  static equals(
    a: LoaderConfig | PlainMessage<LoaderConfig> | undefined,
    b: LoaderConfig | PlainMessage<LoaderConfig> | undefined,
  ): boolean {
    return proto3.util.equals(LoaderConfig, a, b);
  }
}
