// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file mystiko/loader/v1/fetcher.proto (package mystiko.loader.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { ProviderType } from '../../common/v1/types_pb.js';
import { ClientOptions } from '../../service/v1/client_pb.js';

/**
 * @generated from enum mystiko.loader.v1.FetcherType
 */
export enum FetcherType {
  /**
   * @generated from enum value: FETCHER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FETCHER_TYPE_PACKER = 1;
   */
  PACKER = 1,

  /**
   * @generated from enum value: FETCHER_TYPE_SEQUENCER = 2;
   */
  SEQUENCER = 2,

  /**
   * @generated from enum value: FETCHER_TYPE_ETHERSCAN = 3;
   */
  ETHERSCAN = 3,

  /**
   * @generated from enum value: FETCHER_TYPE_PROVIDER = 4;
   */
  PROVIDER = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(FetcherType)
proto3.util.setEnumType(FetcherType, 'mystiko.loader.v1.FetcherType', [
  { no: 0, name: 'FETCHER_TYPE_UNSPECIFIED' },
  { no: 1, name: 'FETCHER_TYPE_PACKER' },
  { no: 2, name: 'FETCHER_TYPE_SEQUENCER' },
  { no: 3, name: 'FETCHER_TYPE_ETHERSCAN' },
  { no: 4, name: 'FETCHER_TYPE_PROVIDER' },
]);

/**
 * @generated from message mystiko.loader.v1.FetcherConfig
 */
export class FetcherConfig extends Message<FetcherConfig> {
  /**
   * @generated from field: optional mystiko.loader.v1.PackerFetcherConfig packer = 1;
   */
  packer?: PackerFetcherConfig;

  /**
   * @generated from field: optional mystiko.loader.v1.SequencerFetcherConfig sequencer = 2;
   */
  sequencer?: SequencerFetcherConfig;

  /**
   * @generated from field: optional mystiko.loader.v1.EtherscanFetcherConfig etherscan = 3;
   */
  etherscan?: EtherscanFetcherConfig;

  /**
   * @generated from field: optional mystiko.loader.v1.ProviderFetcherConfig provider = 4;
   */
  provider?: ProviderFetcherConfig;

  constructor(data?: PartialMessage<FetcherConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.loader.v1.FetcherConfig';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'packer', kind: 'message', T: PackerFetcherConfig, opt: true },
    { no: 2, name: 'sequencer', kind: 'message', T: SequencerFetcherConfig, opt: true },
    { no: 3, name: 'etherscan', kind: 'message', T: EtherscanFetcherConfig, opt: true },
    { no: 4, name: 'provider', kind: 'message', T: ProviderFetcherConfig, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FetcherConfig {
    return new FetcherConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FetcherConfig {
    return new FetcherConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FetcherConfig {
    return new FetcherConfig().fromJsonString(jsonString, options);
  }

  static equals(
    a: FetcherConfig | PlainMessage<FetcherConfig> | undefined,
    b: FetcherConfig | PlainMessage<FetcherConfig> | undefined,
  ): boolean {
    return proto3.util.equals(FetcherConfig, a, b);
  }
}

/**
 * @generated from message mystiko.loader.v1.EtherscanFetcherConfig
 */
export class EtherscanFetcherConfig extends Message<EtherscanFetcherConfig> {
  /**
   * @generated from field: optional uint32 concurrency = 1;
   */
  concurrency?: number;

  /**
   * @generated from field: map<uint64, mystiko.loader.v1.EtherscanFetcherChainConfig> chains = 2;
   */
  chains: { [key: string]: EtherscanFetcherChainConfig } = {};

  /**
   * @generated from field: optional bool skip_validation = 3;
   */
  skipValidation?: boolean;

  /**
   * @generated from field: optional uint32 target_block_priority = 4;
   */
  targetBlockPriority?: number;

  constructor(data?: PartialMessage<EtherscanFetcherConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.loader.v1.EtherscanFetcherConfig';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'concurrency', kind: 'scalar', T: 13 /* ScalarType.UINT32 */, opt: true },
    {
      no: 2,
      name: 'chains',
      kind: 'map',
      K: 4 /* ScalarType.UINT64 */,
      V: { kind: 'message', T: EtherscanFetcherChainConfig },
    },
    { no: 3, name: 'skip_validation', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: 'target_block_priority', kind: 'scalar', T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EtherscanFetcherConfig {
    return new EtherscanFetcherConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EtherscanFetcherConfig {
    return new EtherscanFetcherConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EtherscanFetcherConfig {
    return new EtherscanFetcherConfig().fromJsonString(jsonString, options);
  }

  static equals(
    a: EtherscanFetcherConfig | PlainMessage<EtherscanFetcherConfig> | undefined,
    b: EtherscanFetcherConfig | PlainMessage<EtherscanFetcherConfig> | undefined,
  ): boolean {
    return proto3.util.equals(EtherscanFetcherConfig, a, b);
  }
}

/**
 * @generated from message mystiko.loader.v1.EtherscanFetcherChainConfig
 */
export class EtherscanFetcherChainConfig extends Message<EtherscanFetcherChainConfig> {
  /**
   * @generated from field: optional string url = 1;
   */
  url?: string;

  /**
   * @generated from field: optional string api_key = 2;
   */
  apiKey?: string;

  /**
   * @generated from field: optional uint64 max_requests_per_second = 3;
   */
  maxRequestsPerSecond?: bigint;

  /**
   * @generated from field: optional uint64 page_size = 4;
   */
  pageSize?: bigint;

  /**
   * @generated from field: optional string url_prefix = 5;
   */
  urlPrefix?: string;

  /**
   * @generated from field: optional uint64 delay_num_blocks = 6;
   */
  delayNumBlocks?: bigint;

  constructor(data?: PartialMessage<EtherscanFetcherChainConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.loader.v1.EtherscanFetcherChainConfig';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'url', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: 'api_key', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: 'max_requests_per_second', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: 'page_size', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: 'url_prefix', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: 'delay_num_blocks', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EtherscanFetcherChainConfig {
    return new EtherscanFetcherChainConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EtherscanFetcherChainConfig {
    return new EtherscanFetcherChainConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EtherscanFetcherChainConfig {
    return new EtherscanFetcherChainConfig().fromJsonString(jsonString, options);
  }

  static equals(
    a: EtherscanFetcherChainConfig | PlainMessage<EtherscanFetcherChainConfig> | undefined,
    b: EtherscanFetcherChainConfig | PlainMessage<EtherscanFetcherChainConfig> | undefined,
  ): boolean {
    return proto3.util.equals(EtherscanFetcherChainConfig, a, b);
  }
}

/**
 * @generated from message mystiko.loader.v1.ProviderFetcherConfig
 */
export class ProviderFetcherConfig extends Message<ProviderFetcherConfig> {
  /**
   * @generated from field: optional uint32 concurrency = 1;
   */
  concurrency?: number;

  /**
   * @generated from field: optional uint64 timeout_ms = 2;
   */
  timeoutMs?: bigint;

  /**
   * @generated from field: map<uint64, mystiko.loader.v1.ProviderFetcherChainConfig> chains = 3;
   */
  chains: { [key: string]: ProviderFetcherChainConfig } = {};

  /**
   * @generated from field: optional bool skip_validation = 4;
   */
  skipValidation?: boolean;

  /**
   * @generated from field: optional uint32 target_block_priority = 5;
   */
  targetBlockPriority?: number;

  constructor(data?: PartialMessage<ProviderFetcherConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.loader.v1.ProviderFetcherConfig';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'concurrency', kind: 'scalar', T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 2, name: 'timeout_ms', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    {
      no: 3,
      name: 'chains',
      kind: 'map',
      K: 4 /* ScalarType.UINT64 */,
      V: { kind: 'message', T: ProviderFetcherChainConfig },
    },
    { no: 4, name: 'skip_validation', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 5, name: 'target_block_priority', kind: 'scalar', T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProviderFetcherConfig {
    return new ProviderFetcherConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProviderFetcherConfig {
    return new ProviderFetcherConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProviderFetcherConfig {
    return new ProviderFetcherConfig().fromJsonString(jsonString, options);
  }

  static equals(
    a: ProviderFetcherConfig | PlainMessage<ProviderFetcherConfig> | undefined,
    b: ProviderFetcherConfig | PlainMessage<ProviderFetcherConfig> | undefined,
  ): boolean {
    return proto3.util.equals(ProviderFetcherConfig, a, b);
  }
}

/**
 * @generated from message mystiko.loader.v1.ProviderFetcherChainConfig
 */
export class ProviderFetcherChainConfig extends Message<ProviderFetcherChainConfig> {
  /**
   * @generated from field: map<uint32, string> urls = 1;
   */
  urls: { [key: number]: string } = {};

  /**
   * @generated from field: optional uint64 delay_num_blocks = 2;
   */
  delayNumBlocks?: bigint;

  /**
   * @generated from field: optional mystiko.common.v1.ProviderType provider_type = 3;
   */
  providerType?: ProviderType;

  constructor(data?: PartialMessage<ProviderFetcherChainConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.loader.v1.ProviderFetcherChainConfig';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'urls',
      kind: 'map',
      K: 13 /* ScalarType.UINT32 */,
      V: { kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    },
    { no: 2, name: 'delay_num_blocks', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 3, name: 'provider_type', kind: 'enum', T: proto3.getEnumType(ProviderType), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProviderFetcherChainConfig {
    return new ProviderFetcherChainConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProviderFetcherChainConfig {
    return new ProviderFetcherChainConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProviderFetcherChainConfig {
    return new ProviderFetcherChainConfig().fromJsonString(jsonString, options);
  }

  static equals(
    a: ProviderFetcherChainConfig | PlainMessage<ProviderFetcherChainConfig> | undefined,
    b: ProviderFetcherChainConfig | PlainMessage<ProviderFetcherChainConfig> | undefined,
  ): boolean {
    return proto3.util.equals(ProviderFetcherChainConfig, a, b);
  }
}

/**
 * @generated from message mystiko.loader.v1.PackerFetcherConfig
 */
export class PackerFetcherConfig extends Message<PackerFetcherConfig> {
  /**
   * @generated from field: optional bool skip_validation = 1;
   */
  skipValidation?: boolean;

  /**
   * @generated from field: optional uint32 target_block_priority = 2;
   */
  targetBlockPriority?: number;

  constructor(data?: PartialMessage<PackerFetcherConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.loader.v1.PackerFetcherConfig';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'skip_validation', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: 'target_block_priority', kind: 'scalar', T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PackerFetcherConfig {
    return new PackerFetcherConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PackerFetcherConfig {
    return new PackerFetcherConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PackerFetcherConfig {
    return new PackerFetcherConfig().fromJsonString(jsonString, options);
  }

  static equals(
    a: PackerFetcherConfig | PlainMessage<PackerFetcherConfig> | undefined,
    b: PackerFetcherConfig | PlainMessage<PackerFetcherConfig> | undefined,
  ): boolean {
    return proto3.util.equals(PackerFetcherConfig, a, b);
  }
}

/**
 * @generated from message mystiko.loader.v1.SequencerFetcherConfig
 */
export class SequencerFetcherConfig extends Message<SequencerFetcherConfig> {
  /**
   * @generated from field: optional bool skip_validation = 1;
   */
  skipValidation?: boolean;

  /**
   * @generated from field: optional uint32 target_block_priority = 2;
   */
  targetBlockPriority?: number;

  /**
   * @generated from field: optional mystiko.service.v1.ClientOptions options = 3;
   */
  options?: ClientOptions;

  constructor(data?: PartialMessage<SequencerFetcherConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.loader.v1.SequencerFetcherConfig';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'skip_validation', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: 'target_block_priority', kind: 'scalar', T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: 'options', kind: 'message', T: ClientOptions, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SequencerFetcherConfig {
    return new SequencerFetcherConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SequencerFetcherConfig {
    return new SequencerFetcherConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SequencerFetcherConfig {
    return new SequencerFetcherConfig().fromJsonString(jsonString, options);
  }

  static equals(
    a: SequencerFetcherConfig | PlainMessage<SequencerFetcherConfig> | undefined,
    b: SequencerFetcherConfig | PlainMessage<SequencerFetcherConfig> | undefined,
  ): boolean {
    return proto3.util.equals(SequencerFetcherConfig, a, b);
  }
}
