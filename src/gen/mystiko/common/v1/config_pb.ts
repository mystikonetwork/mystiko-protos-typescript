// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file mystiko/common/v1/config.proto (package mystiko.common.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';

/**
 * @generated from message mystiko.common.v1.ConfigOptions
 */
export class ConfigOptions extends Message<ConfigOptions> {
  /**
   * @generated from field: optional string file_path = 1;
   */
  filePath?: string;

  /**
   * @generated from field: optional bool is_testnet = 2;
   */
  isTestnet?: boolean;

  /**
   * @generated from field: optional bool is_staging = 3;
   */
  isStaging?: boolean;

  /**
   * @generated from field: optional string remote_base_url = 4;
   */
  remoteBaseUrl?: string;

  /**
   * @generated from field: optional string git_revision = 5;
   */
  gitRevision?: string;

  constructor(data?: PartialMessage<ConfigOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.common.v1.ConfigOptions';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'file_path', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: 'is_testnet', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 3, name: 'is_staging', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: 'remote_base_url', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: 'git_revision', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConfigOptions {
    return new ConfigOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConfigOptions {
    return new ConfigOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConfigOptions {
    return new ConfigOptions().fromJsonString(jsonString, options);
  }

  static equals(
    a: ConfigOptions | PlainMessage<ConfigOptions> | undefined,
    b: ConfigOptions | PlainMessage<ConfigOptions> | undefined,
  ): boolean {
    return proto3.util.equals(ConfigOptions, a, b);
  }
}
