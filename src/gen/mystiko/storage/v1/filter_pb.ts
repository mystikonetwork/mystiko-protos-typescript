// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file mystiko/storage/v1/filter.proto (package mystiko.storage.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';

/**
 * @generated from enum mystiko.storage.v1.SubFilterOperator
 */
export enum SubFilterOperator {
  /**
   * @generated from enum value: SUB_FILTER_OPERATOR_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SUB_FILTER_OPERATOR_IS_NULL = 1;
   */
  IS_NULL = 1,

  /**
   * @generated from enum value: SUB_FILTER_OPERATOR_IS_NOT_NULL = 2;
   */
  IS_NOT_NULL = 2,

  /**
   * @generated from enum value: SUB_FILTER_OPERATOR_EQUAL = 3;
   */
  EQUAL = 3,

  /**
   * @generated from enum value: SUB_FILTER_OPERATOR_NOT_EQUAL = 4;
   */
  NOT_EQUAL = 4,

  /**
   * @generated from enum value: SUB_FILTER_OPERATOR_GREATER = 5;
   */
  GREATER = 5,

  /**
   * @generated from enum value: SUB_FILTER_OPERATOR_GREATER_EQUAL = 6;
   */
  GREATER_EQUAL = 6,

  /**
   * @generated from enum value: SUB_FILTER_OPERATOR_LESS = 7;
   */
  LESS = 7,

  /**
   * @generated from enum value: SUB_FILTER_OPERATOR_LESS_EQUAL = 8;
   */
  LESS_EQUAL = 8,

  /**
   * @generated from enum value: SUB_FILTER_OPERATOR_BETWEEN_AND = 9;
   */
  BETWEEN_AND = 9,

  /**
   * @generated from enum value: SUB_FILTER_OPERATOR_IN = 10;
   */
  IN = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(SubFilterOperator)
proto3.util.setEnumType(SubFilterOperator, 'mystiko.storage.v1.SubFilterOperator', [
  { no: 0, name: 'SUB_FILTER_OPERATOR_UNSPECIFIED' },
  { no: 1, name: 'SUB_FILTER_OPERATOR_IS_NULL' },
  { no: 2, name: 'SUB_FILTER_OPERATOR_IS_NOT_NULL' },
  { no: 3, name: 'SUB_FILTER_OPERATOR_EQUAL' },
  { no: 4, name: 'SUB_FILTER_OPERATOR_NOT_EQUAL' },
  { no: 5, name: 'SUB_FILTER_OPERATOR_GREATER' },
  { no: 6, name: 'SUB_FILTER_OPERATOR_GREATER_EQUAL' },
  { no: 7, name: 'SUB_FILTER_OPERATOR_LESS' },
  { no: 8, name: 'SUB_FILTER_OPERATOR_LESS_EQUAL' },
  { no: 9, name: 'SUB_FILTER_OPERATOR_BETWEEN_AND' },
  { no: 10, name: 'SUB_FILTER_OPERATOR_IN' },
]);

/**
 * @generated from enum mystiko.storage.v1.ConditionOperator
 */
export enum ConditionOperator {
  /**
   * @generated from enum value: CONDITION_OPERATOR_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CONDITION_OPERATOR_AND = 1;
   */
  AND = 1,

  /**
   * @generated from enum value: CONDITION_OPERATOR_OR = 2;
   */
  OR = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ConditionOperator)
proto3.util.setEnumType(ConditionOperator, 'mystiko.storage.v1.ConditionOperator', [
  { no: 0, name: 'CONDITION_OPERATOR_UNSPECIFIED' },
  { no: 1, name: 'CONDITION_OPERATOR_AND' },
  { no: 2, name: 'CONDITION_OPERATOR_OR' },
]);

/**
 * @generated from enum mystiko.storage.v1.Order
 */
export enum Order {
  /**
   * @generated from enum value: ORDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ORDER_ASC = 1;
   */
  ASC = 1,

  /**
   * @generated from enum value: ORDER_DESC = 2;
   */
  DESC = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Order)
proto3.util.setEnumType(Order, 'mystiko.storage.v1.Order', [
  { no: 0, name: 'ORDER_UNSPECIFIED' },
  { no: 1, name: 'ORDER_ASC' },
  { no: 2, name: 'ORDER_DESC' },
]);

/**
 * @generated from enum mystiko.storage.v1.ColumnType
 */
export enum ColumnType {
  /**
   * @generated from enum value: COLUMN_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: COLUMN_TYPE_BOOL = 1;
   */
  BOOL = 1,

  /**
   * @generated from enum value: COLUMN_TYPE_CHAR = 2;
   */
  CHAR = 2,

  /**
   * @generated from enum value: COLUMN_TYPE_I8 = 3;
   */
  I8 = 3,

  /**
   * @generated from enum value: COLUMN_TYPE_I16 = 4;
   */
  I16 = 4,

  /**
   * @generated from enum value: COLUMN_TYPE_I32 = 5;
   */
  I32 = 5,

  /**
   * @generated from enum value: COLUMN_TYPE_I64 = 6;
   */
  I64 = 6,

  /**
   * @generated from enum value: COLUMN_TYPE_I128 = 7;
   */
  I128 = 7,

  /**
   * @generated from enum value: COLUMN_TYPE_I_SIZE = 8;
   */
  I_SIZE = 8,

  /**
   * @generated from enum value: COLUMN_TYPE_U8 = 9;
   */
  U8 = 9,

  /**
   * @generated from enum value: COLUMN_TYPE_U16 = 10;
   */
  U16 = 10,

  /**
   * @generated from enum value: COLUMN_TYPE_U32 = 11;
   */
  U32 = 11,

  /**
   * @generated from enum value: COLUMN_TYPE_U64 = 12;
   */
  U64 = 12,

  /**
   * @generated from enum value: COLUMN_TYPE_U128 = 13;
   */
  U128 = 13,

  /**
   * @generated from enum value: COLUMN_TYPE_U_SIZE = 14;
   */
  U_SIZE = 14,

  /**
   * @generated from enum value: COLUMN_TYPE_F32 = 15;
   */
  F32 = 15,

  /**
   * @generated from enum value: COLUMN_TYPE_F64 = 16;
   */
  F64 = 16,

  /**
   * @generated from enum value: COLUMN_TYPE_STRING = 17;
   */
  STRING = 17,

  /**
   * @generated from enum value: COLUMN_TYPE_BIG_INT = 18;
   */
  BIG_INT = 18,

  /**
   * @generated from enum value: COLUMN_TYPE_BIG_UINT = 19;
   */
  BIG_UINT = 19,

  /**
   * @generated from enum value: COLUMN_TYPE_JSON = 20;
   */
  JSON = 20,
}
// Retrieve enum metadata with: proto3.getEnumType(ColumnType)
proto3.util.setEnumType(ColumnType, 'mystiko.storage.v1.ColumnType', [
  { no: 0, name: 'COLUMN_TYPE_UNSPECIFIED' },
  { no: 1, name: 'COLUMN_TYPE_BOOL' },
  { no: 2, name: 'COLUMN_TYPE_CHAR' },
  { no: 3, name: 'COLUMN_TYPE_I8' },
  { no: 4, name: 'COLUMN_TYPE_I16' },
  { no: 5, name: 'COLUMN_TYPE_I32' },
  { no: 6, name: 'COLUMN_TYPE_I64' },
  { no: 7, name: 'COLUMN_TYPE_I128' },
  { no: 8, name: 'COLUMN_TYPE_I_SIZE' },
  { no: 9, name: 'COLUMN_TYPE_U8' },
  { no: 10, name: 'COLUMN_TYPE_U16' },
  { no: 11, name: 'COLUMN_TYPE_U32' },
  { no: 12, name: 'COLUMN_TYPE_U64' },
  { no: 13, name: 'COLUMN_TYPE_U128' },
  { no: 14, name: 'COLUMN_TYPE_U_SIZE' },
  { no: 15, name: 'COLUMN_TYPE_F32' },
  { no: 16, name: 'COLUMN_TYPE_F64' },
  { no: 17, name: 'COLUMN_TYPE_STRING' },
  { no: 18, name: 'COLUMN_TYPE_BIG_INT' },
  { no: 19, name: 'COLUMN_TYPE_BIG_UINT' },
  { no: 20, name: 'COLUMN_TYPE_JSON' },
]);

/**
 * @generated from message mystiko.storage.v1.ColumnValue
 */
export class ColumnValue extends Message<ColumnValue> {
  /**
   * @generated from oneof mystiko.storage.v1.ColumnValue.value
   */
  value:
    | {
        /**
         * @generated from field: bool bool_value = 1;
         */
        value: boolean;
        case: 'boolValue';
      }
    | {
        /**
         * @generated from field: string char_value = 2;
         */
        value: string;
        case: 'charValue';
      }
    | {
        /**
         * @generated from field: sint32 i8_value = 3;
         */
        value: number;
        case: 'i8Value';
      }
    | {
        /**
         * @generated from field: sint32 i16_value = 4;
         */
        value: number;
        case: 'i16Value';
      }
    | {
        /**
         * @generated from field: sint32 i32_value = 5;
         */
        value: number;
        case: 'i32Value';
      }
    | {
        /**
         * @generated from field: sint64 i64_value = 6;
         */
        value: bigint;
        case: 'i64Value';
      }
    | {
        /**
         * @generated from field: bytes i128_value = 7;
         */
        value: Uint8Array;
        case: 'i128Value';
      }
    | {
        /**
         * @generated from field: sint64 isize_value = 8;
         */
        value: bigint;
        case: 'isizeValue';
      }
    | {
        /**
         * @generated from field: uint32 u8_value = 9;
         */
        value: number;
        case: 'u8Value';
      }
    | {
        /**
         * @generated from field: uint32 u16_value = 10;
         */
        value: number;
        case: 'u16Value';
      }
    | {
        /**
         * @generated from field: uint32 u32_value = 11;
         */
        value: number;
        case: 'u32Value';
      }
    | {
        /**
         * @generated from field: uint64 u64_value = 12;
         */
        value: bigint;
        case: 'u64Value';
      }
    | {
        /**
         * @generated from field: bytes u128_value = 13;
         */
        value: Uint8Array;
        case: 'u128Value';
      }
    | {
        /**
         * @generated from field: uint64 usize_value = 14;
         */
        value: bigint;
        case: 'usizeValue';
      }
    | {
        /**
         * @generated from field: float f32_value = 15;
         */
        value: number;
        case: 'f32Value';
      }
    | {
        /**
         * @generated from field: double f64_value = 16;
         */
        value: number;
        case: 'f64Value';
      }
    | {
        /**
         * @generated from field: string string_value = 17;
         */
        value: string;
        case: 'stringValue';
      }
    | {
        /**
         * @generated from field: mystiko.storage.v1.BigInt big_int_value = 18;
         */
        value: BigInt;
        case: 'bigIntValue';
      }
    | {
        /**
         * @generated from field: bytes big_uint_value = 19;
         */
        value: Uint8Array;
        case: 'bigUintValue';
      }
    | {
        /**
         * @generated from field: string json_value = 20;
         */
        value: string;
        case: 'jsonValue';
      }
    | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ColumnValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.storage.v1.ColumnValue';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'bool_value', kind: 'scalar', T: 8 /* ScalarType.BOOL */, oneof: 'value' },
    { no: 2, name: 'char_value', kind: 'scalar', T: 9 /* ScalarType.STRING */, oneof: 'value' },
    { no: 3, name: 'i8_value', kind: 'scalar', T: 17 /* ScalarType.SINT32 */, oneof: 'value' },
    { no: 4, name: 'i16_value', kind: 'scalar', T: 17 /* ScalarType.SINT32 */, oneof: 'value' },
    { no: 5, name: 'i32_value', kind: 'scalar', T: 17 /* ScalarType.SINT32 */, oneof: 'value' },
    { no: 6, name: 'i64_value', kind: 'scalar', T: 18 /* ScalarType.SINT64 */, oneof: 'value' },
    { no: 7, name: 'i128_value', kind: 'scalar', T: 12 /* ScalarType.BYTES */, oneof: 'value' },
    { no: 8, name: 'isize_value', kind: 'scalar', T: 18 /* ScalarType.SINT64 */, oneof: 'value' },
    { no: 9, name: 'u8_value', kind: 'scalar', T: 13 /* ScalarType.UINT32 */, oneof: 'value' },
    { no: 10, name: 'u16_value', kind: 'scalar', T: 13 /* ScalarType.UINT32 */, oneof: 'value' },
    { no: 11, name: 'u32_value', kind: 'scalar', T: 13 /* ScalarType.UINT32 */, oneof: 'value' },
    { no: 12, name: 'u64_value', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, oneof: 'value' },
    { no: 13, name: 'u128_value', kind: 'scalar', T: 12 /* ScalarType.BYTES */, oneof: 'value' },
    { no: 14, name: 'usize_value', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, oneof: 'value' },
    { no: 15, name: 'f32_value', kind: 'scalar', T: 2 /* ScalarType.FLOAT */, oneof: 'value' },
    { no: 16, name: 'f64_value', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, oneof: 'value' },
    { no: 17, name: 'string_value', kind: 'scalar', T: 9 /* ScalarType.STRING */, oneof: 'value' },
    { no: 18, name: 'big_int_value', kind: 'message', T: BigInt, oneof: 'value' },
    { no: 19, name: 'big_uint_value', kind: 'scalar', T: 12 /* ScalarType.BYTES */, oneof: 'value' },
    { no: 20, name: 'json_value', kind: 'scalar', T: 9 /* ScalarType.STRING */, oneof: 'value' },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnValue {
    return new ColumnValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnValue {
    return new ColumnValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnValue {
    return new ColumnValue().fromJsonString(jsonString, options);
  }

  static equals(
    a: ColumnValue | PlainMessage<ColumnValue> | undefined,
    b: ColumnValue | PlainMessage<ColumnValue> | undefined,
  ): boolean {
    return proto3.util.equals(ColumnValue, a, b);
  }
}

/**
 * @generated from message mystiko.storage.v1.BigInt
 */
export class BigInt extends Message<BigInt> {
  /**
   * @generated from field: bool is_positive = 1;
   */
  isPositive = false;

  /**
   * @generated from field: bytes value = 2;
   */
  value = new Uint8Array(0);

  constructor(data?: PartialMessage<BigInt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.storage.v1.BigInt';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'is_positive', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'value', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BigInt {
    return new BigInt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BigInt {
    return new BigInt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BigInt {
    return new BigInt().fromJsonString(jsonString, options);
  }

  static equals(
    a: BigInt | PlainMessage<BigInt> | undefined,
    b: BigInt | PlainMessage<BigInt> | undefined,
  ): boolean {
    return proto3.util.equals(BigInt, a, b);
  }
}

/**
 * @generated from message mystiko.storage.v1.SubFilter
 */
export class SubFilter extends Message<SubFilter> {
  /**
   * @generated from field: mystiko.storage.v1.SubFilterOperator operator = 1;
   */
  operator = SubFilterOperator.UNSPECIFIED;

  /**
   * @generated from field: string column = 2;
   */
  column = '';

  /**
   * @generated from field: repeated mystiko.storage.v1.ColumnValue values = 3;
   */
  values: ColumnValue[] = [];

  constructor(data?: PartialMessage<SubFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.storage.v1.SubFilter';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'operator', kind: 'enum', T: proto3.getEnumType(SubFilterOperator) },
    { no: 2, name: 'column', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'values', kind: 'message', T: ColumnValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubFilter {
    return new SubFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubFilter {
    return new SubFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubFilter {
    return new SubFilter().fromJsonString(jsonString, options);
  }

  static equals(
    a: SubFilter | PlainMessage<SubFilter> | undefined,
    b: SubFilter | PlainMessage<SubFilter> | undefined,
  ): boolean {
    return proto3.util.equals(SubFilter, a, b);
  }
}

/**
 * @generated from message mystiko.storage.v1.Condition
 */
export class Condition extends Message<Condition> {
  /**
   * @generated from field: mystiko.storage.v1.ConditionOperator operator = 1;
   */
  operator = ConditionOperator.UNSPECIFIED;

  /**
   * @generated from field: repeated mystiko.storage.v1.SubFilter sub_filters = 2;
   */
  subFilters: SubFilter[] = [];

  constructor(data?: PartialMessage<Condition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.storage.v1.Condition';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'operator', kind: 'enum', T: proto3.getEnumType(ConditionOperator) },
    { no: 2, name: 'sub_filters', kind: 'message', T: SubFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Condition {
    return new Condition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Condition {
    return new Condition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Condition {
    return new Condition().fromJsonString(jsonString, options);
  }

  static equals(
    a: Condition | PlainMessage<Condition> | undefined,
    b: Condition | PlainMessage<Condition> | undefined,
  ): boolean {
    return proto3.util.equals(Condition, a, b);
  }
}

/**
 * @generated from message mystiko.storage.v1.OrderBy
 */
export class OrderBy extends Message<OrderBy> {
  /**
   * @generated from field: repeated string columns = 1;
   */
  columns: string[] = [];

  /**
   * @generated from field: mystiko.storage.v1.Order order = 2;
   */
  order = Order.UNSPECIFIED;

  constructor(data?: PartialMessage<OrderBy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.storage.v1.OrderBy';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'columns', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: 'order', kind: 'enum', T: proto3.getEnumType(Order) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrderBy {
    return new OrderBy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrderBy {
    return new OrderBy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrderBy {
    return new OrderBy().fromJsonString(jsonString, options);
  }

  static equals(
    a: OrderBy | PlainMessage<OrderBy> | undefined,
    b: OrderBy | PlainMessage<OrderBy> | undefined,
  ): boolean {
    return proto3.util.equals(OrderBy, a, b);
  }
}

/**
 * @generated from message mystiko.storage.v1.QueryFilter
 */
export class QueryFilter extends Message<QueryFilter> {
  /**
   * @generated from field: repeated mystiko.storage.v1.Condition conditions = 1;
   */
  conditions: Condition[] = [];

  /**
   * @generated from field: mystiko.storage.v1.ConditionOperator conditions_operator = 2;
   */
  conditionsOperator = ConditionOperator.UNSPECIFIED;

  /**
   * @generated from field: optional uint64 limit = 3;
   */
  limit?: bigint;

  /**
   * @generated from field: optional uint64 offset = 4;
   */
  offset?: bigint;

  /**
   * @generated from field: optional mystiko.storage.v1.OrderBy order_by = 5;
   */
  orderBy?: OrderBy;

  /**
   * @generated from field: optional mystiko.storage.v1.Condition additional_condition = 6;
   */
  additionalCondition?: Condition;

  constructor(data?: PartialMessage<QueryFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.storage.v1.QueryFilter';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'conditions', kind: 'message', T: Condition, repeated: true },
    { no: 2, name: 'conditions_operator', kind: 'enum', T: proto3.getEnumType(ConditionOperator) },
    { no: 3, name: 'limit', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 4, name: 'offset', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 5, name: 'order_by', kind: 'message', T: OrderBy, opt: true },
    { no: 6, name: 'additional_condition', kind: 'message', T: Condition, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFilter {
    return new QueryFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFilter {
    return new QueryFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFilter {
    return new QueryFilter().fromJsonString(jsonString, options);
  }

  static equals(
    a: QueryFilter | PlainMessage<QueryFilter> | undefined,
    b: QueryFilter | PlainMessage<QueryFilter> | undefined,
  ): boolean {
    return proto3.util.equals(QueryFilter, a, b);
  }
}
