// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file mystiko/service/v1/server.proto (package mystiko.service.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';

/**
 * @generated from message mystiko.service.v1.ServerOptions
 */
export class ServerOptions extends Message<ServerOptions> {
  /**
   * @generated from field: optional string bind_address = 1;
   */
  bindAddress?: string;

  /**
   * @generated from field: optional uint32 port = 2;
   */
  port?: number;

  /**
   * @generated from field: optional string tls_key = 3;
   */
  tlsKey?: string;

  /**
   * @generated from field: optional string tls_key_path = 4;
   */
  tlsKeyPath?: string;

  /**
   * @generated from field: optional string tls_pem = 5;
   */
  tlsPem?: string;

  /**
   * @generated from field: optional string tls_pem_path = 6;
   */
  tlsPemPath?: string;

  /**
   * @generated from field: optional bool accept_http1 = 7;
   */
  acceptHttp1?: boolean;

  /**
   * @generated from field: optional bool enable_web = 8;
   */
  enableWeb?: boolean;

  /**
   * @generated from field: optional uint64 concurrency_limit_per_connection = 9;
   */
  concurrencyLimitPerConnection?: bigint;

  /**
   * @generated from field: optional uint64 timeout_ms = 10;
   */
  timeoutMs?: bigint;

  /**
   * @generated from field: optional uint32 initial_stream_window_size = 11;
   */
  initialStreamWindowSize?: number;

  /**
   * @generated from field: optional uint32 initial_connection_window_size = 12;
   */
  initialConnectionWindowSize?: number;

  /**
   * @generated from field: optional uint32 max_concurrent_streams = 13;
   */
  maxConcurrentStreams?: number;

  /**
   * @generated from field: optional uint64 http2_keepalive_interval_ms = 14;
   */
  http2KeepaliveIntervalMs?: bigint;

  /**
   * @generated from field: optional uint64 http2_keepalive_timeout_ms = 15;
   */
  http2KeepaliveTimeoutMs?: bigint;

  /**
   * @generated from field: optional bool http2_adaptive_window = 16;
   */
  http2AdaptiveWindow?: boolean;

  /**
   * @generated from field: optional uint64 tcp_keepalive_ms = 17;
   */
  tcpKeepaliveMs?: bigint;

  /**
   * @generated from field: optional bool tcp_nodelay = 18;
   */
  tcpNodelay?: boolean;

  /**
   * @generated from field: optional uint32 max_frame_size = 19;
   */
  maxFrameSize?: number;

  constructor(data?: PartialMessage<ServerOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.service.v1.ServerOptions';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'bind_address', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: 'port', kind: 'scalar', T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: 'tls_key', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: 'tls_key_path', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: 'tls_pem', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: 'tls_pem_path', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: 'accept_http1', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 8, name: 'enable_web', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    {
      no: 9,
      name: 'concurrency_limit_per_connection',
      kind: 'scalar',
      T: 4 /* ScalarType.UINT64 */,
      opt: true,
    },
    { no: 10, name: 'timeout_ms', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 11, name: 'initial_stream_window_size', kind: 'scalar', T: 13 /* ScalarType.UINT32 */, opt: true },
    {
      no: 12,
      name: 'initial_connection_window_size',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
      opt: true,
    },
    { no: 13, name: 'max_concurrent_streams', kind: 'scalar', T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 14, name: 'http2_keepalive_interval_ms', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 15, name: 'http2_keepalive_timeout_ms', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 16, name: 'http2_adaptive_window', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 17, name: 'tcp_keepalive_ms', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 18, name: 'tcp_nodelay', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 19, name: 'max_frame_size', kind: 'scalar', T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ServerOptions {
    return new ServerOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ServerOptions {
    return new ServerOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ServerOptions {
    return new ServerOptions().fromJsonString(jsonString, options);
  }

  static equals(
    a: ServerOptions | PlainMessage<ServerOptions> | undefined,
    b: ServerOptions | PlainMessage<ServerOptions> | undefined,
  ): boolean {
    return proto3.util.equals(ServerOptions, a, b);
  }
}
