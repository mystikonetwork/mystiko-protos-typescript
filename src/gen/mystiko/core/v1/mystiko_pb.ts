// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file mystiko/core/v1/mystiko.proto (package mystiko.core.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { ConfigOptions } from '../../common/v1/config_pb.js';
import { RelayerClientOptions } from '../../relayer/v1/client_pb.js';
import { LoaderConfig } from '../../loader/v1/loader_pb.js';

/**
 * @generated from message mystiko.core.v1.MystikoOptions
 */
export class MystikoOptions extends Message<MystikoOptions> {
  /**
   * @generated from field: optional mystiko.common.v1.ConfigOptions config_options = 1;
   */
  configOptions?: ConfigOptions;

  /**
   * @generated from field: optional mystiko.relayer.v1.RelayerClientOptions relayer_client_options = 2;
   */
  relayerClientOptions?: RelayerClientOptions;

  /**
   * @generated from field: optional mystiko.loader.v1.LoaderConfig loader_config = 3;
   */
  loaderConfig?: LoaderConfig;

  /**
   * @generated from field: optional string db_path = 4;
   */
  dbPath?: string;

  /**
   * @generated from field: optional string static_cache_path = 5;
   */
  staticCachePath?: string;

  constructor(data?: PartialMessage<MystikoOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.v1.MystikoOptions';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'config_options', kind: 'message', T: ConfigOptions, opt: true },
    { no: 2, name: 'relayer_client_options', kind: 'message', T: RelayerClientOptions, opt: true },
    { no: 3, name: 'loader_config', kind: 'message', T: LoaderConfig, opt: true },
    { no: 4, name: 'db_path', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: 'static_cache_path', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MystikoOptions {
    return new MystikoOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MystikoOptions {
    return new MystikoOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MystikoOptions {
    return new MystikoOptions().fromJsonString(jsonString, options);
  }

  static equals(
    a: MystikoOptions | PlainMessage<MystikoOptions> | undefined,
    b: MystikoOptions | PlainMessage<MystikoOptions> | undefined,
  ): boolean {
    return proto3.util.equals(MystikoOptions, a, b);
  }
}
