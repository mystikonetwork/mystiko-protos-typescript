// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file mystiko/core/v1/transaction.proto (package mystiko.core.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';

/**
 * @generated from message mystiko.core.v1.AccessListItem
 */
export class AccessListItem extends Message<AccessListItem> {
  /**
   * @generated from field: string address = 1;
   */
  address = '';

  /**
   * @generated from field: repeated string storage_keys = 2;
   */
  storageKeys: string[] = [];

  constructor(data?: PartialMessage<AccessListItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.v1.AccessListItem';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'address', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'storage_keys', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AccessListItem {
    return new AccessListItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AccessListItem {
    return new AccessListItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AccessListItem {
    return new AccessListItem().fromJsonString(jsonString, options);
  }

  static equals(
    a: AccessListItem | PlainMessage<AccessListItem> | undefined,
    b: AccessListItem | PlainMessage<AccessListItem> | undefined,
  ): boolean {
    return proto3.util.equals(AccessListItem, a, b);
  }
}

/**
 * @generated from message mystiko.core.v1.LegacyTransaction
 */
export class LegacyTransaction extends Message<LegacyTransaction> {
  /**
   * @generated from field: optional string from = 1;
   */
  from?: string;

  /**
   * @generated from field: optional string to = 2;
   */
  to?: string;

  /**
   * @generated from field: optional string gas = 3;
   */
  gas?: string;

  /**
   * @generated from field: optional string gas_price = 4;
   */
  gasPrice?: string;

  /**
   * @generated from field: optional string value = 5;
   */
  value?: string;

  /**
   * @generated from field: optional string data = 6;
   */
  data?: string;

  /**
   * @generated from field: optional string nonce = 7;
   */
  nonce?: string;

  /**
   * @generated from field: optional uint64 chain_id = 8;
   */
  chainId?: bigint;

  constructor(data?: PartialMessage<LegacyTransaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.v1.LegacyTransaction';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'from', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: 'to', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: 'gas', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: 'gas_price', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: 'value', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: 'data', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: 'nonce', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: 'chain_id', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LegacyTransaction {
    return new LegacyTransaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LegacyTransaction {
    return new LegacyTransaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LegacyTransaction {
    return new LegacyTransaction().fromJsonString(jsonString, options);
  }

  static equals(
    a: LegacyTransaction | PlainMessage<LegacyTransaction> | undefined,
    b: LegacyTransaction | PlainMessage<LegacyTransaction> | undefined,
  ): boolean {
    return proto3.util.equals(LegacyTransaction, a, b);
  }
}

/**
 * @generated from message mystiko.core.v1.Eip1559Transaction
 */
export class Eip1559Transaction extends Message<Eip1559Transaction> {
  /**
   * @generated from field: optional string from = 1;
   */
  from?: string;

  /**
   * @generated from field: optional string to = 2;
   */
  to?: string;

  /**
   * @generated from field: optional string gas = 3;
   */
  gas?: string;

  /**
   * @generated from field: optional string value = 4;
   */
  value?: string;

  /**
   * @generated from field: optional string data = 5;
   */
  data?: string;

  /**
   * @generated from field: optional string nonce = 6;
   */
  nonce?: string;

  /**
   * @generated from field: optional string max_fee_per_gas = 7;
   */
  maxFeePerGas?: string;

  /**
   * @generated from field: optional string max_priority_fee_per_gas = 8;
   */
  maxPriorityFeePerGas?: string;

  /**
   * @generated from field: optional uint64 chain_id = 9;
   */
  chainId?: bigint;

  /**
   * @generated from field: repeated mystiko.core.v1.AccessListItem access_list = 10;
   */
  accessList: AccessListItem[] = [];

  constructor(data?: PartialMessage<Eip1559Transaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.v1.Eip1559Transaction';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'from', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: 'to', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: 'gas', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: 'value', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: 'data', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: 'nonce', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 7, name: 'max_fee_per_gas', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 8, name: 'max_priority_fee_per_gas', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: 'chain_id', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 10, name: 'access_list', kind: 'message', T: AccessListItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Eip1559Transaction {
    return new Eip1559Transaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Eip1559Transaction {
    return new Eip1559Transaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Eip1559Transaction {
    return new Eip1559Transaction().fromJsonString(jsonString, options);
  }

  static equals(
    a: Eip1559Transaction | PlainMessage<Eip1559Transaction> | undefined,
    b: Eip1559Transaction | PlainMessage<Eip1559Transaction> | undefined,
  ): boolean {
    return proto3.util.equals(Eip1559Transaction, a, b);
  }
}

/**
 * @generated from message mystiko.core.v1.Eip2930Transaction
 */
export class Eip2930Transaction extends Message<Eip2930Transaction> {
  /**
   * @generated from field: mystiko.core.v1.LegacyTransaction tx = 1;
   */
  tx?: LegacyTransaction;

  /**
   * @generated from field: repeated mystiko.core.v1.AccessListItem access_list = 2;
   */
  accessList: AccessListItem[] = [];

  constructor(data?: PartialMessage<Eip2930Transaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.v1.Eip2930Transaction';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'tx', kind: 'message', T: LegacyTransaction },
    { no: 2, name: 'access_list', kind: 'message', T: AccessListItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Eip2930Transaction {
    return new Eip2930Transaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Eip2930Transaction {
    return new Eip2930Transaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Eip2930Transaction {
    return new Eip2930Transaction().fromJsonString(jsonString, options);
  }

  static equals(
    a: Eip2930Transaction | PlainMessage<Eip2930Transaction> | undefined,
    b: Eip2930Transaction | PlainMessage<Eip2930Transaction> | undefined,
  ): boolean {
    return proto3.util.equals(Eip2930Transaction, a, b);
  }
}

/**
 * @generated from message mystiko.core.v1.Transaction
 */
export class Transaction extends Message<Transaction> {
  /**
   * @generated from oneof mystiko.core.v1.Transaction.transaction
   */
  transaction:
    | {
        /**
         * @generated from field: mystiko.core.v1.LegacyTransaction legacy_transaction = 1;
         */
        value: LegacyTransaction;
        case: 'legacyTransaction';
      }
    | {
        /**
         * @generated from field: mystiko.core.v1.Eip1559Transaction eip1559_transaction = 2;
         */
        value: Eip1559Transaction;
        case: 'eip1559Transaction';
      }
    | {
        /**
         * @generated from field: mystiko.core.v1.Eip2930Transaction eip2930_transaction = 3;
         */
        value: Eip2930Transaction;
        case: 'eip2930Transaction';
      }
    | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Transaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.v1.Transaction';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'legacy_transaction', kind: 'message', T: LegacyTransaction, oneof: 'transaction' },
    { no: 2, name: 'eip1559_transaction', kind: 'message', T: Eip1559Transaction, oneof: 'transaction' },
    { no: 3, name: 'eip2930_transaction', kind: 'message', T: Eip2930Transaction, oneof: 'transaction' },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transaction {
    return new Transaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transaction {
    return new Transaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transaction {
    return new Transaction().fromJsonString(jsonString, options);
  }

  static equals(
    a: Transaction | PlainMessage<Transaction> | undefined,
    b: Transaction | PlainMessage<Transaction> | undefined,
  ): boolean {
    return proto3.util.equals(Transaction, a, b);
  }
}

/**
 * @generated from message mystiko.core.v1.GetAddressRequest
 */
export class GetAddressRequest extends Message<GetAddressRequest> {
  constructor(data?: PartialMessage<GetAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.v1.GetAddressRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAddressRequest {
    return new GetAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAddressRequest {
    return new GetAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAddressRequest {
    return new GetAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetAddressRequest | PlainMessage<GetAddressRequest> | undefined,
    b: GetAddressRequest | PlainMessage<GetAddressRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetAddressRequest, a, b);
  }
}

/**
 * @generated from message mystiko.core.v1.GetAddressResponse
 */
export class GetAddressResponse extends Message<GetAddressResponse> {
  /**
   * @generated from field: string address = 1;
   */
  address = '';

  constructor(data?: PartialMessage<GetAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.v1.GetAddressResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'address', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAddressResponse {
    return new GetAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAddressResponse {
    return new GetAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAddressResponse {
    return new GetAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetAddressResponse | PlainMessage<GetAddressResponse> | undefined,
    b: GetAddressResponse | PlainMessage<GetAddressResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetAddressResponse, a, b);
  }
}

/**
 * @generated from message mystiko.core.v1.SendTransactionRequest
 */
export class SendTransactionRequest extends Message<SendTransactionRequest> {
  /**
   * @generated from field: uint64 chain_id = 1;
   */
  chainId = protoInt64.zero;

  /**
   * @generated from field: mystiko.core.v1.Transaction transaction = 2;
   */
  transaction?: Transaction;

  constructor(data?: PartialMessage<SendTransactionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.v1.SendTransactionRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'chain_id', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: 'transaction', kind: 'message', T: Transaction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendTransactionRequest {
    return new SendTransactionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendTransactionRequest {
    return new SendTransactionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendTransactionRequest {
    return new SendTransactionRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: SendTransactionRequest | PlainMessage<SendTransactionRequest> | undefined,
    b: SendTransactionRequest | PlainMessage<SendTransactionRequest> | undefined,
  ): boolean {
    return proto3.util.equals(SendTransactionRequest, a, b);
  }
}

/**
 * @generated from message mystiko.core.v1.SendTransactionResponse
 */
export class SendTransactionResponse extends Message<SendTransactionResponse> {
  /**
   * @generated from field: uint64 chain_id = 1;
   */
  chainId = protoInt64.zero;

  /**
   * @generated from field: string tx_hash = 2;
   */
  txHash = '';

  constructor(data?: PartialMessage<SendTransactionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.v1.SendTransactionResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'chain_id', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: 'tx_hash', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendTransactionResponse {
    return new SendTransactionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendTransactionResponse {
    return new SendTransactionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendTransactionResponse {
    return new SendTransactionResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: SendTransactionResponse | PlainMessage<SendTransactionResponse> | undefined,
    b: SendTransactionResponse | PlainMessage<SendTransactionResponse> | undefined,
  ): boolean {
    return proto3.util.equals(SendTransactionResponse, a, b);
  }
}
