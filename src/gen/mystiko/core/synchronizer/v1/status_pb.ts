// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file mystiko/core/synchronizer/v1/status.proto (package mystiko.core.synchronizer.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';

/**
 * @generated from message mystiko.core.synchronizer.v1.ContractStatus
 */
export class ContractStatus extends Message<ContractStatus> {
  /**
   * @generated from field: string contract_address = 1;
   */
  contractAddress = '';

  /**
   * @generated from field: uint64 synced_block = 2;
   */
  syncedBlock = protoInt64.zero;

  constructor(data?: PartialMessage<ContractStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.synchronizer.v1.ContractStatus';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'contract_address', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'synced_block', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContractStatus {
    return new ContractStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContractStatus {
    return new ContractStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContractStatus {
    return new ContractStatus().fromJsonString(jsonString, options);
  }

  static equals(
    a: ContractStatus | PlainMessage<ContractStatus> | undefined,
    b: ContractStatus | PlainMessage<ContractStatus> | undefined,
  ): boolean {
    return proto3.util.equals(ContractStatus, a, b);
  }
}

/**
 * @generated from message mystiko.core.synchronizer.v1.ChainStatus
 */
export class ChainStatus extends Message<ChainStatus> {
  /**
   * @generated from field: uint64 chain_id = 1;
   */
  chainId = protoInt64.zero;

  /**
   * @generated from field: uint64 synced_block = 2;
   */
  syncedBlock = protoInt64.zero;

  /**
   * @generated from field: uint64 target_block = 3;
   */
  targetBlock = protoInt64.zero;

  /**
   * @generated from field: repeated mystiko.core.synchronizer.v1.ContractStatus contracts = 4;
   */
  contracts: ContractStatus[] = [];

  constructor(data?: PartialMessage<ChainStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.synchronizer.v1.ChainStatus';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'chain_id', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: 'synced_block', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: 'target_block', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: 'contracts', kind: 'message', T: ContractStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChainStatus {
    return new ChainStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChainStatus {
    return new ChainStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChainStatus {
    return new ChainStatus().fromJsonString(jsonString, options);
  }

  static equals(
    a: ChainStatus | PlainMessage<ChainStatus> | undefined,
    b: ChainStatus | PlainMessage<ChainStatus> | undefined,
  ): boolean {
    return proto3.util.equals(ChainStatus, a, b);
  }
}

/**
 * @generated from message mystiko.core.synchronizer.v1.SynchronizerStatus
 */
export class SynchronizerStatus extends Message<SynchronizerStatus> {
  /**
   * @generated from field: repeated mystiko.core.synchronizer.v1.ChainStatus chains = 1;
   */
  chains: ChainStatus[] = [];

  constructor(data?: PartialMessage<SynchronizerStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.synchronizer.v1.SynchronizerStatus';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'chains', kind: 'message', T: ChainStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SynchronizerStatus {
    return new SynchronizerStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SynchronizerStatus {
    return new SynchronizerStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SynchronizerStatus {
    return new SynchronizerStatus().fromJsonString(jsonString, options);
  }

  static equals(
    a: SynchronizerStatus | PlainMessage<SynchronizerStatus> | undefined,
    b: SynchronizerStatus | PlainMessage<SynchronizerStatus> | undefined,
  ): boolean {
    return proto3.util.equals(SynchronizerStatus, a, b);
  }
}
