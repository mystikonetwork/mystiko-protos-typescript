// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file mystiko/core/scanner/v1/balance.proto (package mystiko.core.scanner.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { BridgeType } from '../../../common/v1/types_pb.js';

/**
 * @generated from message mystiko.core.scanner.v1.Balance
 */
export class Balance extends Message<Balance> {
  /**
   * @generated from field: string asset_symbol = 1;
   */
  assetSymbol = '';

  /**
   * @generated from field: double unspent = 2;
   */
  unspent = 0;

  /**
   * @generated from field: double pending = 3;
   */
  pending = 0;

  /**
   * @generated from field: optional double spent = 4;
   */
  spent?: number;

  constructor(data?: PartialMessage<Balance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.scanner.v1.Balance';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'asset_symbol', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'unspent', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: 'pending', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: 'spent', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Balance {
    return new Balance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Balance {
    return new Balance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Balance {
    return new Balance().fromJsonString(jsonString, options);
  }

  static equals(
    a: Balance | PlainMessage<Balance> | undefined,
    b: Balance | PlainMessage<Balance> | undefined,
  ): boolean {
    return proto3.util.equals(Balance, a, b);
  }
}

/**
 * @generated from message mystiko.core.scanner.v1.BalanceOptions
 */
export class BalanceOptions extends Message<BalanceOptions> {
  /**
   * @generated from field: optional bool with_spent = 1;
   */
  withSpent?: boolean;

  /**
   * @generated from field: repeated string shielded_addresses = 2;
   */
  shieldedAddresses: string[] = [];

  /**
   * @generated from field: repeated uint64 chain_ids = 3;
   */
  chainIds: bigint[] = [];

  /**
   * @generated from field: repeated string asset_symbols = 4;
   */
  assetSymbols: string[] = [];

  /**
   * @generated from field: repeated string contract_addresses = 5;
   */
  contractAddresses: string[] = [];

  /**
   * @generated from field: repeated mystiko.common.v1.BridgeType bridge_types = 6;
   */
  bridgeTypes: BridgeType[] = [];

  constructor(data?: PartialMessage<BalanceOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.scanner.v1.BalanceOptions';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'with_spent', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 2, name: 'shielded_addresses', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: 'chain_ids', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, repeated: true },
    { no: 4, name: 'asset_symbols', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: 'contract_addresses', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: 'bridge_types', kind: 'enum', T: proto3.getEnumType(BridgeType), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BalanceOptions {
    return new BalanceOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BalanceOptions {
    return new BalanceOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BalanceOptions {
    return new BalanceOptions().fromJsonString(jsonString, options);
  }

  static equals(
    a: BalanceOptions | PlainMessage<BalanceOptions> | undefined,
    b: BalanceOptions | PlainMessage<BalanceOptions> | undefined,
  ): boolean {
    return proto3.util.equals(BalanceOptions, a, b);
  }
}

/**
 * @generated from message mystiko.core.scanner.v1.BalanceResult
 */
export class BalanceResult extends Message<BalanceResult> {
  /**
   * @generated from field: repeated mystiko.core.scanner.v1.Balance balances = 1;
   */
  balances: Balance[] = [];

  constructor(data?: PartialMessage<BalanceResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.scanner.v1.BalanceResult';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'balances', kind: 'message', T: Balance, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BalanceResult {
    return new BalanceResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BalanceResult {
    return new BalanceResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BalanceResult {
    return new BalanceResult().fromJsonString(jsonString, options);
  }

  static equals(
    a: BalanceResult | PlainMessage<BalanceResult> | undefined,
    b: BalanceResult | PlainMessage<BalanceResult> | undefined,
  ): boolean {
    return proto3.util.equals(BalanceResult, a, b);
  }
}
