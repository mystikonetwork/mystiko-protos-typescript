// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file mystiko/core/document/v1/spend.proto (package mystiko.core.document.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';
import { SpendStatus, SpendType } from '../../v1/common_pb.js';

/**
 * @generated from message mystiko.core.document.v1.Spend
 */
export class Spend extends Message<Spend> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  /**
   * @generated from field: uint64 created_at = 2;
   */
  createdAt = protoInt64.zero;

  /**
   * @generated from field: uint64 updated_at = 3;
   */
  updatedAt = protoInt64.zero;

  /**
   * @generated from field: uint64 chain_id = 4;
   */
  chainId = protoInt64.zero;

  /**
   * @generated from field: string contract_address = 5;
   */
  contractAddress = '';

  /**
   * @generated from field: string asset_symbol = 6;
   */
  assetSymbol = '';

  /**
   * @generated from field: uint32 asset_decimals = 7;
   */
  assetDecimals = 0;

  /**
   * @generated from field: string root_hash = 8;
   */
  rootHash = '';

  /**
   * @generated from field: double amount = 9;
   */
  amount = 0;

  /**
   * @generated from field: string decimal_amount = 10;
   */
  decimalAmount = '';

  /**
   * @generated from field: string recipient = 11;
   */
  recipient = '';

  /**
   * @generated from field: string wallet_id = 12;
   */
  walletId = '';

  /**
   * @generated from field: repeated string input_commitments = 13;
   */
  inputCommitments: string[] = [];

  /**
   * @generated from field: repeated string output_commitments = 14;
   */
  outputCommitments: string[] = [];

  /**
   * @generated from field: repeated string nullifiers = 15;
   */
  nullifiers: string[] = [];

  /**
   * @generated from field: repeated string signature_public_key_hashes = 16;
   */
  signaturePublicKeyHashes: string[] = [];

  /**
   * @generated from field: repeated string encrypted_auditor_notes = 17;
   */
  encryptedAuditorNotes: string[] = [];

  /**
   * @generated from field: optional double rollup_fee_amount = 18;
   */
  rollupFeeAmount?: number;

  /**
   * @generated from field: optional string rollup_fee_decimal_amount = 19;
   */
  rollupFeeDecimalAmount?: string;

  /**
   * @generated from field: optional double gas_relayer_fee_amount = 20;
   */
  gasRelayerFeeAmount?: number;

  /**
   * @generated from field: optional string gas_relayer_fee_decimal_amount = 21;
   */
  gasRelayerFeeDecimalAmount?: string;

  /**
   * @generated from field: optional string signature_public_key = 22;
   */
  signaturePublicKey?: string;

  /**
   * @generated from field: optional string asset_address = 23;
   */
  assetAddress?: string;

  /**
   * @generated from field: optional string proof = 24;
   */
  proof?: string;

  /**
   * @generated from field: optional string gas_relayer_address = 25;
   */
  gasRelayerAddress?: string;

  /**
   * @generated from field: optional string signature = 26;
   */
  signature?: string;

  /**
   * @generated from field: optional string random_auditing_public_key = 27;
   */
  randomAuditingPublicKey?: string;

  /**
   * @generated from field: optional string error_message = 28;
   */
  errorMessage?: string;

  /**
   * @generated from field: optional string transaction_hash = 29;
   */
  transactionHash?: string;

  /**
   * @generated from field: mystiko.core.v1.SpendType spend_type = 30;
   */
  spendType = SpendType.UNSPECIFIED;

  /**
   * @generated from field: mystiko.core.v1.SpendStatus status = 31;
   */
  status = SpendStatus.UNSPECIFIED;

  constructor(data?: PartialMessage<Spend>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.document.v1.Spend';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'created_at', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: 'updated_at', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: 'chain_id', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: 'contract_address', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'asset_symbol', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 7, name: 'asset_decimals', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: 'root_hash', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 9, name: 'amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 10, name: 'decimal_amount', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 11, name: 'recipient', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 12, name: 'wallet_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 13, name: 'input_commitments', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 14, name: 'output_commitments', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 15, name: 'nullifiers', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
    {
      no: 16,
      name: 'signature_public_key_hashes',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 17, name: 'encrypted_auditor_notes', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 18, name: 'rollup_fee_amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 19, name: 'rollup_fee_decimal_amount', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 20, name: 'gas_relayer_fee_amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, opt: true },
    {
      no: 21,
      name: 'gas_relayer_fee_decimal_amount',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
    { no: 22, name: 'signature_public_key', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 23, name: 'asset_address', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 24, name: 'proof', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 25, name: 'gas_relayer_address', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 26, name: 'signature', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 27, name: 'random_auditing_public_key', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 28, name: 'error_message', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 29, name: 'transaction_hash', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 30, name: 'spend_type', kind: 'enum', T: proto3.getEnumType(SpendType) },
    { no: 31, name: 'status', kind: 'enum', T: proto3.getEnumType(SpendStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Spend {
    return new Spend().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Spend {
    return new Spend().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Spend {
    return new Spend().fromJsonString(jsonString, options);
  }

  static equals(
    a: Spend | PlainMessage<Spend> | undefined,
    b: Spend | PlainMessage<Spend> | undefined,
  ): boolean {
    return proto3.util.equals(Spend, a, b);
  }
}
