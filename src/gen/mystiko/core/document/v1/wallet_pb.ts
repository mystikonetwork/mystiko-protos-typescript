// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file mystiko/core/document/v1/wallet.proto (package mystiko.core.document.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';

/**
 * @generated from message mystiko.core.document.v1.Wallet
 */
export class Wallet extends Message<Wallet> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  /**
   * @generated from field: uint64 created_at = 2;
   */
  createdAt = protoInt64.zero;

  /**
   * @generated from field: uint64 updated_at = 3;
   */
  updatedAt = protoInt64.zero;

  /**
   * @generated from field: string encrypted_entropy = 4;
   */
  encryptedEntropy = '';

  /**
   * @generated from field: string hashed_password = 5;
   */
  hashedPassword = '';

  /**
   * @generated from field: uint32 account_nonce = 6;
   */
  accountNonce = 0;

  constructor(data?: PartialMessage<Wallet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.document.v1.Wallet';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'created_at', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: 'updated_at', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: 'encrypted_entropy', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'hashed_password', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'account_nonce', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Wallet {
    return new Wallet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Wallet {
    return new Wallet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Wallet {
    return new Wallet().fromJsonString(jsonString, options);
  }

  static equals(
    a: Wallet | PlainMessage<Wallet> | undefined,
    b: Wallet | PlainMessage<Wallet> | undefined,
  ): boolean {
    return proto3.util.equals(Wallet, a, b);
  }
}
