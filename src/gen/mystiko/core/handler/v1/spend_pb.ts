// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file mystiko/core/handler/v1/spend.proto (package mystiko.core.handler.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';
import { SpendType } from '../../v1/common_pb.js';
import { BridgeType } from '../../../common/v1/types_pb.js';
import { Transaction } from '../../v1/transaction_pb.js';

/**
 * @generated from enum mystiko.core.handler.v1.SpendInvalidCode
 */
export enum SpendInvalidCode {
  /**
   * @generated from enum value: SPEND_INVALID_CODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SPEND_INVALID_CODE_INVALID_AMOUNT = 1;
   */
  INVALID_AMOUNT = 1,

  /**
   * @generated from enum value: SPEND_INVALID_CODE_SPLIT_DISABLED = 2;
   */
  SPLIT_DISABLED = 2,

  /**
   * @generated from enum value: SPEND_INVALID_CODE_NO_AVAILABLE_ASSETS = 3;
   */
  NO_AVAILABLE_ASSETS = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(SpendInvalidCode)
proto3.util.setEnumType(SpendInvalidCode, 'mystiko.core.handler.v1.SpendInvalidCode', [
  { no: 0, name: 'SPEND_INVALID_CODE_UNSPECIFIED' },
  { no: 1, name: 'SPEND_INVALID_CODE_INVALID_AMOUNT' },
  { no: 2, name: 'SPEND_INVALID_CODE_SPLIT_DISABLED' },
  { no: 3, name: 'SPEND_INVALID_CODE_NO_AVAILABLE_ASSETS' },
]);

/**
 * @generated from message mystiko.core.handler.v1.QuoteSpendOptions
 */
export class QuoteSpendOptions extends Message<QuoteSpendOptions> {
  /**
   * @generated from field: uint64 chain_id = 1;
   */
  chainId = protoInt64.zero;

  /**
   * @generated from field: string asset_symbol = 2;
   */
  assetSymbol = '';

  /**
   * @generated from field: optional uint32 version = 3;
   */
  version?: number;

  /**
   * @generated from field: optional double amount = 4;
   */
  amount?: number;

  /**
   * @generated from field: optional bool use_relayer = 5;
   */
  useRelayer?: boolean;

  /**
   * @generated from field: optional uint64 query_timeout_ms = 6;
   */
  queryTimeoutMs?: bigint;

  /**
   * @generated from field: optional mystiko.core.v1.SpendType spend_type = 7;
   */
  spendType?: SpendType;

  /**
   * @generated from field: optional mystiko.common.v1.BridgeType bridge_type = 8;
   */
  bridgeType?: BridgeType;

  constructor(data?: PartialMessage<QuoteSpendOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.handler.v1.QuoteSpendOptions';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'chain_id', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: 'asset_symbol', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'version', kind: 'scalar', T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 4, name: 'amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 5, name: 'use_relayer', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 6, name: 'query_timeout_ms', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 7, name: 'spend_type', kind: 'enum', T: proto3.getEnumType(SpendType), opt: true },
    { no: 8, name: 'bridge_type', kind: 'enum', T: proto3.getEnumType(BridgeType), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuoteSpendOptions {
    return new QuoteSpendOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuoteSpendOptions {
    return new QuoteSpendOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuoteSpendOptions {
    return new QuoteSpendOptions().fromJsonString(jsonString, options);
  }

  static equals(
    a: QuoteSpendOptions | PlainMessage<QuoteSpendOptions> | undefined,
    b: QuoteSpendOptions | PlainMessage<QuoteSpendOptions> | undefined,
  ): boolean {
    return proto3.util.equals(QuoteSpendOptions, a, b);
  }
}

/**
 * @generated from message mystiko.core.handler.v1.CreateSpendOptions
 */
export class CreateSpendOptions extends Message<CreateSpendOptions> {
  /**
   * @generated from field: uint64 chain_id = 1;
   */
  chainId = protoInt64.zero;

  /**
   * @generated from field: string asset_symbol = 2;
   */
  assetSymbol = '';

  /**
   * @generated from field: double amount = 4;
   */
  amount = 0;

  /**
   * @generated from field: string recipient = 5;
   */
  recipient = '';

  /**
   * @generated from field: string wallet_password = 6;
   */
  walletPassword = '';

  /**
   * @generated from field: optional uint32 version = 7;
   */
  version?: number;

  /**
   * @generated from field: optional double rollup_fee_amount = 8;
   */
  rollupFeeAmount?: number;

  /**
   * @generated from field: optional string gas_relayer = 9;
   */
  gasRelayer?: string;

  /**
   * @generated from field: optional uint64 query_timeout_ms = 10;
   */
  queryTimeoutMs?: bigint;

  /**
   * @generated from field: optional mystiko.core.handler.v1.SpendQuote spend_quote = 11;
   */
  spendQuote?: SpendQuote;

  /**
   * @generated from field: optional mystiko.core.v1.SpendType spend_type = 12;
   */
  spendType?: SpendType;

  /**
   * @generated from field: optional mystiko.common.v1.BridgeType bridge_type = 13;
   */
  bridgeType?: BridgeType;

  constructor(data?: PartialMessage<CreateSpendOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.handler.v1.CreateSpendOptions';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'chain_id', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: 'asset_symbol', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: 'recipient', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'wallet_password', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 7, name: 'version', kind: 'scalar', T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 8, name: 'rollup_fee_amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 9, name: 'gas_relayer', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: 'query_timeout_ms', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 11, name: 'spend_quote', kind: 'message', T: SpendQuote, opt: true },
    { no: 12, name: 'spend_type', kind: 'enum', T: proto3.getEnumType(SpendType), opt: true },
    { no: 13, name: 'bridge_type', kind: 'enum', T: proto3.getEnumType(BridgeType), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSpendOptions {
    return new CreateSpendOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSpendOptions {
    return new CreateSpendOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSpendOptions {
    return new CreateSpendOptions().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateSpendOptions | PlainMessage<CreateSpendOptions> | undefined,
    b: CreateSpendOptions | PlainMessage<CreateSpendOptions> | undefined,
  ): boolean {
    return proto3.util.equals(CreateSpendOptions, a, b);
  }
}

/**
 * @generated from message mystiko.core.handler.v1.SendSpendOptions
 */
export class SendSpendOptions extends Message<SendSpendOptions> {
  /**
   * @generated from field: string spend_id = 1;
   */
  spendId = '';

  /**
   * @generated from field: string wallet_password = 2;
   */
  walletPassword = '';

  /**
   * @generated from field: optional string private_key = 3;
   */
  privateKey?: string;

  /**
   * @generated from field: optional string signer_provider = 4;
   */
  signerProvider?: string;

  /**
   * @generated from field: optional uint64 query_timeout_ms = 5;
   */
  queryTimeoutMs?: bigint;

  /**
   * @generated from field: optional uint64 spend_confirmations = 6;
   */
  spendConfirmations?: bigint;

  /**
   * @generated from field: optional uint64 tx_send_timeout_ms = 7;
   */
  txSendTimeoutMs?: bigint;

  /**
   * @generated from field: optional uint64 tx_wait_timeout_ms = 8;
   */
  txWaitTimeoutMs?: bigint;

  /**
   * @generated from field: optional uint64 tx_wait_interval_ms = 9;
   */
  txWaitIntervalMs?: bigint;

  /**
   * @generated from field: optional uint64 relayer_wait_timeout_ms = 10;
   */
  relayerWaitTimeoutMs?: bigint;

  /**
   * @generated from field: optional uint64 relayer_wait_interval_ms = 11;
   */
  relayerWaitIntervalMs?: bigint;

  /**
   * @generated from field: optional mystiko.core.v1.Transaction tx = 12;
   */
  tx?: Transaction;

  /**
   * @generated from field: optional bytes raw_merkle_tree = 13;
   */
  rawMerkleTree?: Uint8Array;

  /**
   * @generated from field: optional bytes raw_zk_program = 14;
   */
  rawZkProgram?: Uint8Array;

  /**
   * @generated from field: optional bytes raw_zk_proving_key = 15;
   */
  rawZkProvingKey?: Uint8Array;

  /**
   * @generated from field: optional bytes raw_zk_verifying_key = 16;
   */
  rawZkVerifyingKey?: Uint8Array;

  /**
   * @generated from field: optional bytes raw_zk_abi = 17;
   */
  rawZkAbi?: Uint8Array;

  constructor(data?: PartialMessage<SendSpendOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.handler.v1.SendSpendOptions';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'spend_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'wallet_password', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'private_key', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: 'signer_provider', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: 'query_timeout_ms', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 6, name: 'spend_confirmations', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 7, name: 'tx_send_timeout_ms', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 8, name: 'tx_wait_timeout_ms', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 9, name: 'tx_wait_interval_ms', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 10, name: 'relayer_wait_timeout_ms', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 11, name: 'relayer_wait_interval_ms', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
    { no: 12, name: 'tx', kind: 'message', T: Transaction, opt: true },
    { no: 13, name: 'raw_merkle_tree', kind: 'scalar', T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 14, name: 'raw_zk_program', kind: 'scalar', T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 15, name: 'raw_zk_proving_key', kind: 'scalar', T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 16, name: 'raw_zk_verifying_key', kind: 'scalar', T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 17, name: 'raw_zk_abi', kind: 'scalar', T: 12 /* ScalarType.BYTES */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendSpendOptions {
    return new SendSpendOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendSpendOptions {
    return new SendSpendOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendSpendOptions {
    return new SendSpendOptions().fromJsonString(jsonString, options);
  }

  static equals(
    a: SendSpendOptions | PlainMessage<SendSpendOptions> | undefined,
    b: SendSpendOptions | PlainMessage<SendSpendOptions> | undefined,
  ): boolean {
    return proto3.util.equals(SendSpendOptions, a, b);
  }
}

/**
 * @generated from message mystiko.core.handler.v1.AmountRange
 */
export class AmountRange extends Message<AmountRange> {
  /**
   * @generated from field: double min = 1;
   */
  min = 0;

  /**
   * @generated from field: string decimal_min = 2;
   */
  decimalMin = '';

  /**
   * @generated from field: double max = 3;
   */
  max = 0;

  /**
   * @generated from field: string decimal_max = 4;
   */
  decimalMax = '';

  constructor(data?: PartialMessage<AmountRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.handler.v1.AmountRange';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'min', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: 'decimal_min', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'max', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: 'decimal_max', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AmountRange {
    return new AmountRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AmountRange {
    return new AmountRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AmountRange {
    return new AmountRange().fromJsonString(jsonString, options);
  }

  static equals(
    a: AmountRange | PlainMessage<AmountRange> | undefined,
    b: AmountRange | PlainMessage<AmountRange> | undefined,
  ): boolean {
    return proto3.util.equals(AmountRange, a, b);
  }
}

/**
 * @generated from message mystiko.core.handler.v1.GasRelayer
 */
export class GasRelayer extends Message<GasRelayer> {
  /**
   * @generated from field: string url = 1;
   */
  url = '';

  /**
   * @generated from field: string name = 2;
   */
  name = '';

  /**
   * @generated from field: string address = 3;
   */
  address = '';

  /**
   * @generated from field: double min_gas_fee = 4;
   */
  minGasFee = 0;

  /**
   * @generated from field: string min_gas_fee_decimal = 5;
   */
  minGasFeeDecimal = '';

  /**
   * @generated from field: double service_fee_ratio = 6;
   */
  serviceFeeRatio = 0;

  /**
   * @generated from field: uint32 service_fee_of_ten_thousandth = 7;
   */
  serviceFeeOfTenThousandth = 0;

  constructor(data?: PartialMessage<GasRelayer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.handler.v1.GasRelayer';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'url', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'address', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'min_gas_fee', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: 'min_gas_fee_decimal', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'service_fee_ratio', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: 'service_fee_of_ten_thousandth', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GasRelayer {
    return new GasRelayer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GasRelayer {
    return new GasRelayer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GasRelayer {
    return new GasRelayer().fromJsonString(jsonString, options);
  }

  static equals(
    a: GasRelayer | PlainMessage<GasRelayer> | undefined,
    b: GasRelayer | PlainMessage<GasRelayer> | undefined,
  ): boolean {
    return proto3.util.equals(GasRelayer, a, b);
  }
}

/**
 * @generated from message mystiko.core.handler.v1.SpendQuote
 */
export class SpendQuote extends Message<SpendQuote> {
  /**
   * @generated from field: bool valid = 1;
   */
  valid = false;

  /**
   * @generated from field: string asset_symbol = 2;
   */
  assetSymbol = '';

  /**
   * @generated from field: uint32 asset_decimals = 3;
   */
  assetDecimals = 0;

  /**
   * @generated from field: double current_balance = 4;
   */
  currentBalance = 0;

  /**
   * @generated from field: string current_decimal_balance = 5;
   */
  currentDecimalBalance = '';

  /**
   * @generated from field: uint64 num_of_inputs = 6;
   */
  numOfInputs = protoInt64.zero;

  /**
   * @generated from field: uint64 num_of_outputs = 7;
   */
  numOfOutputs = protoInt64.zero;

  /**
   * @generated from field: double min_rollup_fee = 8;
   */
  minRollupFee = 0;

  /**
   * @generated from field: string min_rollup_fee_decimal = 9;
   */
  minRollupFeeDecimal = '';

  /**
   * @generated from field: string rollup_fee_asset_symbol = 10;
   */
  rollupFeeAssetSymbol = '';

  /**
   * @generated from field: uint32 rollup_fee_asset_decimals = 11;
   */
  rollupFeeAssetDecimals = 0;

  /**
   * @generated from field: repeated double fixed_amounts = 12;
   */
  fixedAmounts: number[] = [];

  /**
   * @generated from field: repeated string fixed_decimal_amounts = 13;
   */
  fixedDecimalAmounts: string[] = [];

  /**
   * @generated from field: repeated string selected_commitments = 14;
   */
  selectedCommitments: string[] = [];

  /**
   * @generated from field: repeated mystiko.core.handler.v1.GasRelayer gas_relayers = 15;
   */
  gasRelayers: GasRelayer[] = [];

  /**
   * @generated from field: optional double max_gas_relayer_fee = 16;
   */
  maxGasRelayerFee?: number;

  /**
   * @generated from field: optional string max_gas_relayer_fee_decimal = 17;
   */
  maxGasRelayerFeeDecimal?: string;

  /**
   * @generated from field: optional string gas_relayer_fee_asset_symbol = 18;
   */
  gasRelayerFeeAssetSymbol?: string;

  /**
   * @generated from field: optional uint32 gas_relayer_fee_asset_decimals = 19;
   */
  gasRelayerFeeAssetDecimals?: number;

  /**
   * @generated from field: optional mystiko.core.handler.v1.SpendInvalidCode invalid_code = 20;
   */
  invalidCode?: SpendInvalidCode;

  /**
   * @generated from field: optional mystiko.core.handler.v1.AmountRange amount_range = 21;
   */
  amountRange?: AmountRange;

  constructor(data?: PartialMessage<SpendQuote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.handler.v1.SpendQuote';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'valid', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'asset_symbol', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'asset_decimals', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: 'current_balance', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: 'current_decimal_balance', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'num_of_inputs', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: 'num_of_outputs', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: 'min_rollup_fee', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 9, name: 'min_rollup_fee_decimal', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 10, name: 'rollup_fee_asset_symbol', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 11, name: 'rollup_fee_asset_decimals', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: 'fixed_amounts', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 13, name: 'fixed_decimal_amounts', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 14, name: 'selected_commitments', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 15, name: 'gas_relayers', kind: 'message', T: GasRelayer, repeated: true },
    { no: 16, name: 'max_gas_relayer_fee', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, opt: true },
    { no: 17, name: 'max_gas_relayer_fee_decimal', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 18, name: 'gas_relayer_fee_asset_symbol', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    {
      no: 19,
      name: 'gas_relayer_fee_asset_decimals',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
      opt: true,
    },
    { no: 20, name: 'invalid_code', kind: 'enum', T: proto3.getEnumType(SpendInvalidCode), opt: true },
    { no: 21, name: 'amount_range', kind: 'message', T: AmountRange, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpendQuote {
    return new SpendQuote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpendQuote {
    return new SpendQuote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpendQuote {
    return new SpendQuote().fromJsonString(jsonString, options);
  }

  static equals(
    a: SpendQuote | PlainMessage<SpendQuote> | undefined,
    b: SpendQuote | PlainMessage<SpendQuote> | undefined,
  ): boolean {
    return proto3.util.equals(SpendQuote, a, b);
  }
}

/**
 * @generated from message mystiko.core.handler.v1.SpendSummary
 */
export class SpendSummary extends Message<SpendSummary> {
  /**
   * @generated from field: string asset_symbol = 1;
   */
  assetSymbol = '';

  /**
   * @generated from field: uint32 asset_decimals = 2;
   */
  assetDecimals = 0;

  /**
   * @generated from field: double current_balance = 3;
   */
  currentBalance = 0;

  /**
   * @generated from field: string current_decimal_balance = 4;
   */
  currentDecimalBalance = '';

  /**
   * @generated from field: double new_balance = 5;
   */
  newBalance = 0;

  /**
   * @generated from field: string new_decimal_balance = 6;
   */
  newDecimalBalance = '';

  /**
   * @generated from field: double amount = 7;
   */
  amount = 0;

  /**
   * @generated from field: string decimal_amount = 8;
   */
  decimalAmount = '';

  /**
   * @generated from field: string recipient = 9;
   */
  recipient = '';

  /**
   * @generated from field: double rollup_fee_amount = 10;
   */
  rollupFeeAmount = 0;

  /**
   * @generated from field: string rollup_fee_decimal_amount = 11;
   */
  rollupFeeDecimalAmount = '';

  /**
   * @generated from field: double rollup_fee_total_amount = 12;
   */
  rollupFeeTotalAmount = 0;

  /**
   * @generated from field: string rollup_fee_total_decimal_amount = 13;
   */
  rollupFeeTotalDecimalAmount = '';

  /**
   * @generated from field: string rollup_fee_asset_symbol = 14;
   */
  rollupFeeAssetSymbol = '';

  /**
   * @generated from field: uint32 rollup_fee_asset_decimals = 15;
   */
  rollupFeeAssetDecimals = 0;

  /**
   * @generated from field: optional double gas_relayer_fee_amount = 16;
   */
  gasRelayerFeeAmount?: number;

  /**
   * @generated from field: optional string gas_relayer_fee_decimal_amount = 17;
   */
  gasRelayerFeeDecimalAmount?: string;

  /**
   * @generated from field: optional string gas_relayer_fee_asset_symbol = 18;
   */
  gasRelayerFeeAssetSymbol?: string;

  /**
   * @generated from field: optional uint32 gas_relayer_fee_asset_decimals = 19;
   */
  gasRelayerFeeAssetDecimals?: number;

  /**
   * @generated from field: optional string gas_relayer_address = 20;
   */
  gasRelayerAddress?: string;

  /**
   * @generated from field: optional string gas_relayer_name = 21;
   */
  gasRelayerName?: string;

  /**
   * @generated from field: optional string gas_relayer_url = 22;
   */
  gasRelayerUrl?: string;

  constructor(data?: PartialMessage<SpendSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.handler.v1.SpendSummary';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'asset_symbol', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'asset_decimals', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: 'current_balance', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: 'current_decimal_balance', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'new_balance', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: 'new_decimal_balance', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 7, name: 'amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 8, name: 'decimal_amount', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 9, name: 'recipient', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 10, name: 'rollup_fee_amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 11, name: 'rollup_fee_decimal_amount', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 12, name: 'rollup_fee_total_amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 13, name: 'rollup_fee_total_decimal_amount', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 14, name: 'rollup_fee_asset_symbol', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 15, name: 'rollup_fee_asset_decimals', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: 'gas_relayer_fee_amount', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */, opt: true },
    {
      no: 17,
      name: 'gas_relayer_fee_decimal_amount',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
    { no: 18, name: 'gas_relayer_fee_asset_symbol', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    {
      no: 19,
      name: 'gas_relayer_fee_asset_decimals',
      kind: 'scalar',
      T: 13 /* ScalarType.UINT32 */,
      opt: true,
    },
    { no: 20, name: 'gas_relayer_address', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 21, name: 'gas_relayer_name', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 22, name: 'gas_relayer_url', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpendSummary {
    return new SpendSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpendSummary {
    return new SpendSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpendSummary {
    return new SpendSummary().fromJsonString(jsonString, options);
  }

  static equals(
    a: SpendSummary | PlainMessage<SpendSummary> | undefined,
    b: SpendSummary | PlainMessage<SpendSummary> | undefined,
  ): boolean {
    return proto3.util.equals(SpendSummary, a, b);
  }
}

/**
 * @generated from message mystiko.core.handler.v1.FixSpendStatusOptions
 */
export class FixSpendStatusOptions extends Message<FixSpendStatusOptions> {
  /**
   * @generated from field: string spend_id = 1;
   */
  spendId = '';

  /**
   * @generated from field: optional uint64 query_timeout_ms = 2;
   */
  queryTimeoutMs?: bigint;

  constructor(data?: PartialMessage<FixSpendStatusOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.core.handler.v1.FixSpendStatusOptions';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'spend_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'query_timeout_ms', kind: 'scalar', T: 4 /* ScalarType.UINT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FixSpendStatusOptions {
    return new FixSpendStatusOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FixSpendStatusOptions {
    return new FixSpendStatusOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FixSpendStatusOptions {
    return new FixSpendStatusOptions().fromJsonString(jsonString, options);
  }

  static equals(
    a: FixSpendStatusOptions | PlainMessage<FixSpendStatusOptions> | undefined,
    b: FixSpendStatusOptions | PlainMessage<FixSpendStatusOptions> | undefined,
  ): boolean {
    return proto3.util.equals(FixSpendStatusOptions, a, b);
  }
}
