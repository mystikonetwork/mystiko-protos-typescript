// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file mystiko/config/v1/asset.proto (package mystiko.config.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { AssetType } from '../../common/v1/types_pb.js';

/**
 * @generated from message mystiko.config.v1.AssetConfig
 */
export class AssetConfig extends Message<AssetConfig> {
  /**
   * @generated from field: mystiko.common.v1.AssetType asset_type = 1;
   */
  assetType = AssetType.UNSPECIFIED;

  /**
   * @generated from field: string asset_symbol = 2;
   */
  assetSymbol = '';

  /**
   * @generated from field: uint32 asset_decimals = 3;
   */
  assetDecimals = 0;

  /**
   * @generated from field: optional string asset_address = 4;
   */
  assetAddress?: string;

  /**
   * @generated from field: repeated string recommended_amounts = 5;
   */
  recommendedAmounts: string[] = [];

  constructor(data?: PartialMessage<AssetConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.config.v1.AssetConfig';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'asset_type', kind: 'enum', T: proto3.getEnumType(AssetType) },
    { no: 2, name: 'asset_symbol', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'asset_decimals', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: 'asset_address', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: 'recommended_amounts', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssetConfig {
    return new AssetConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssetConfig {
    return new AssetConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssetConfig {
    return new AssetConfig().fromJsonString(jsonString, options);
  }

  static equals(
    a: AssetConfig | PlainMessage<AssetConfig> | undefined,
    b: AssetConfig | PlainMessage<AssetConfig> | undefined,
  ): boolean {
    return proto3.util.equals(AssetConfig, a, b);
  }
}
