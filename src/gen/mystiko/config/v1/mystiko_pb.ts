// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file mystiko/config/v1/mystiko.proto (package mystiko.config.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { ChainConfig } from './chain_pb.js';
import { BridgeConfig } from '../bridge/v1/bridge_pb.js';
import { ClientOptions } from '../../service/v1/client_pb.js';
import { PackerConfig } from './packer_pb.js';
import { CircuitConfig } from './circuit_pb.js';

/**
 * @generated from message mystiko.config.v1.MystikoConfig
 */
export class MystikoConfig extends Message<MystikoConfig> {
  /**
   * @generated from field: string version = 1;
   */
  version = '';

  /**
   * @generated from field: map<uint64, mystiko.config.v1.ChainConfig> chain_configs = 2;
   */
  chainConfigs: { [key: string]: ChainConfig } = {};

  /**
   * @generated from field: map<int32, mystiko.config.bridge.v1.BridgeConfig> bridge_configs = 3;
   */
  bridgeConfigs: { [key: number]: BridgeConfig } = {};

  /**
   * @generated from field: optional string git_revision = 4;
   */
  gitRevision?: string;

  /**
   * @generated from field: optional mystiko.service.v1.ClientOptions sequencer_config = 5;
   */
  sequencerConfig?: ClientOptions;

  /**
   * @generated from field: optional mystiko.config.v1.PackerConfig packer_config = 6;
   */
  packerConfig?: PackerConfig;

  /**
   * @generated from field: repeated string country_blacklist = 7;
   */
  countryBlacklist: string[] = [];

  /**
   * @generated from field: repeated mystiko.config.v1.CircuitConfig circuit_configs = 8;
   */
  circuitConfigs: CircuitConfig[] = [];

  constructor(data?: PartialMessage<MystikoConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.config.v1.MystikoConfig';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'version', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'chain_configs',
      kind: 'map',
      K: 4 /* ScalarType.UINT64 */,
      V: { kind: 'message', T: ChainConfig },
    },
    {
      no: 3,
      name: 'bridge_configs',
      kind: 'map',
      K: 5 /* ScalarType.INT32 */,
      V: { kind: 'message', T: BridgeConfig },
    },
    { no: 4, name: 'git_revision', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: 'sequencer_config', kind: 'message', T: ClientOptions, opt: true },
    { no: 6, name: 'packer_config', kind: 'message', T: PackerConfig, opt: true },
    { no: 7, name: 'country_blacklist', kind: 'scalar', T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: 'circuit_configs', kind: 'message', T: CircuitConfig, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MystikoConfig {
    return new MystikoConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MystikoConfig {
    return new MystikoConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MystikoConfig {
    return new MystikoConfig().fromJsonString(jsonString, options);
  }

  static equals(
    a: MystikoConfig | PlainMessage<MystikoConfig> | undefined,
    b: MystikoConfig | PlainMessage<MystikoConfig> | undefined,
  ): boolean {
    return proto3.util.equals(MystikoConfig, a, b);
  }
}
