// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file mystiko/api/handler/v1/spend.proto (package mystiko.api.handler.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';
import {
  CreateSpendOptions,
  FixSpendStatusOptions,
  QuoteSpendOptions,
  SendSpendOptions,
  SpendQuote,
  SpendSummary,
} from '../../../core/handler/v1/spend_pb.js';
import { ClientOptions } from '../../../service/v1/client_pb.js';
import { QueryFilter } from '../../../storage/v1/filter_pb.js';
import { Spend } from '../../../core/document/v1/spend_pb.js';
import { ColumnValuePair } from './common_pb.js';

/**
 * @generated from message mystiko.api.handler.v1.SpendQuoteRequest
 */
export class SpendQuoteRequest extends Message<SpendQuoteRequest> {
  /**
   * @generated from field: mystiko.core.handler.v1.QuoteSpendOptions options = 1;
   */
  options?: QuoteSpendOptions;

  constructor(data?: PartialMessage<SpendQuoteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.SpendQuoteRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'options', kind: 'message', T: QuoteSpendOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpendQuoteRequest {
    return new SpendQuoteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpendQuoteRequest {
    return new SpendQuoteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpendQuoteRequest {
    return new SpendQuoteRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: SpendQuoteRequest | PlainMessage<SpendQuoteRequest> | undefined,
    b: SpendQuoteRequest | PlainMessage<SpendQuoteRequest> | undefined,
  ): boolean {
    return proto3.util.equals(SpendQuoteRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.SpendSummaryRequest
 */
export class SpendSummaryRequest extends Message<SpendSummaryRequest> {
  /**
   * @generated from field: mystiko.core.handler.v1.CreateSpendOptions options = 1;
   */
  options?: CreateSpendOptions;

  constructor(data?: PartialMessage<SpendSummaryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.SpendSummaryRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'options', kind: 'message', T: CreateSpendOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpendSummaryRequest {
    return new SpendSummaryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpendSummaryRequest {
    return new SpendSummaryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpendSummaryRequest {
    return new SpendSummaryRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: SpendSummaryRequest | PlainMessage<SpendSummaryRequest> | undefined,
    b: SpendSummaryRequest | PlainMessage<SpendSummaryRequest> | undefined,
  ): boolean {
    return proto3.util.equals(SpendSummaryRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.CreateSpendRequest
 */
export class CreateSpendRequest extends Message<CreateSpendRequest> {
  /**
   * @generated from field: mystiko.core.handler.v1.CreateSpendOptions options = 1;
   */
  options?: CreateSpendOptions;

  constructor(data?: PartialMessage<CreateSpendRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CreateSpendRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'options', kind: 'message', T: CreateSpendOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSpendRequest {
    return new CreateSpendRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSpendRequest {
    return new CreateSpendRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSpendRequest {
    return new CreateSpendRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateSpendRequest | PlainMessage<CreateSpendRequest> | undefined,
    b: CreateSpendRequest | PlainMessage<CreateSpendRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CreateSpendRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.SendSpendRequest
 */
export class SendSpendRequest extends Message<SendSpendRequest> {
  /**
   * @generated from field: mystiko.core.handler.v1.SendSpendOptions options = 1;
   */
  options?: SendSpendOptions;

  constructor(data?: PartialMessage<SendSpendRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.SendSpendRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'options', kind: 'message', T: SendSpendOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendSpendRequest {
    return new SendSpendRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendSpendRequest {
    return new SendSpendRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendSpendRequest {
    return new SendSpendRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: SendSpendRequest | PlainMessage<SendSpendRequest> | undefined,
    b: SendSpendRequest | PlainMessage<SendSpendRequest> | undefined,
  ): boolean {
    return proto3.util.equals(SendSpendRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.SendSpendWithGrpcRequest
 */
export class SendSpendWithGrpcRequest extends Message<SendSpendWithGrpcRequest> {
  /**
   * @generated from field: mystiko.core.handler.v1.SendSpendOptions send_options = 1;
   */
  sendOptions?: SendSpendOptions;

  /**
   * @generated from field: mystiko.service.v1.ClientOptions client_options = 2;
   */
  clientOptions?: ClientOptions;

  constructor(data?: PartialMessage<SendSpendWithGrpcRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.SendSpendWithGrpcRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'send_options', kind: 'message', T: SendSpendOptions },
    { no: 2, name: 'client_options', kind: 'message', T: ClientOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendSpendWithGrpcRequest {
    return new SendSpendWithGrpcRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendSpendWithGrpcRequest {
    return new SendSpendWithGrpcRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendSpendWithGrpcRequest {
    return new SendSpendWithGrpcRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: SendSpendWithGrpcRequest | PlainMessage<SendSpendWithGrpcRequest> | undefined,
    b: SendSpendWithGrpcRequest | PlainMessage<SendSpendWithGrpcRequest> | undefined,
  ): boolean {
    return proto3.util.equals(SendSpendWithGrpcRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.FixSpendStatusRequest
 */
export class FixSpendStatusRequest extends Message<FixSpendStatusRequest> {
  /**
   * @generated from field: mystiko.core.handler.v1.FixSpendStatusOptions options = 1;
   */
  options?: FixSpendStatusOptions;

  constructor(data?: PartialMessage<FixSpendStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.FixSpendStatusRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'options', kind: 'message', T: FixSpendStatusOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FixSpendStatusRequest {
    return new FixSpendStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FixSpendStatusRequest {
    return new FixSpendStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FixSpendStatusRequest {
    return new FixSpendStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: FixSpendStatusRequest | PlainMessage<FixSpendStatusRequest> | undefined,
    b: FixSpendStatusRequest | PlainMessage<FixSpendStatusRequest> | undefined,
  ): boolean {
    return proto3.util.equals(FixSpendStatusRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.FindSpendRequest
 */
export class FindSpendRequest extends Message<FindSpendRequest> {
  /**
   * @generated from field: mystiko.storage.v1.QueryFilter filter = 1;
   */
  filter?: QueryFilter;

  constructor(data?: PartialMessage<FindSpendRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.FindSpendRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'filter', kind: 'message', T: QueryFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindSpendRequest {
    return new FindSpendRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindSpendRequest {
    return new FindSpendRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindSpendRequest {
    return new FindSpendRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: FindSpendRequest | PlainMessage<FindSpendRequest> | undefined,
    b: FindSpendRequest | PlainMessage<FindSpendRequest> | undefined,
  ): boolean {
    return proto3.util.equals(FindSpendRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.FindSpendByIdRequest
 */
export class FindSpendByIdRequest extends Message<FindSpendByIdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  constructor(data?: PartialMessage<FindSpendByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.FindSpendByIdRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindSpendByIdRequest {
    return new FindSpendByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindSpendByIdRequest {
    return new FindSpendByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindSpendByIdRequest {
    return new FindSpendByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: FindSpendByIdRequest | PlainMessage<FindSpendByIdRequest> | undefined,
    b: FindSpendByIdRequest | PlainMessage<FindSpendByIdRequest> | undefined,
  ): boolean {
    return proto3.util.equals(FindSpendByIdRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.CountSpendsRequest
 */
export class CountSpendsRequest extends Message<CountSpendsRequest> {
  /**
   * @generated from field: mystiko.storage.v1.QueryFilter filter = 1;
   */
  filter?: QueryFilter;

  constructor(data?: PartialMessage<CountSpendsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CountSpendsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'filter', kind: 'message', T: QueryFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountSpendsRequest {
    return new CountSpendsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountSpendsRequest {
    return new CountSpendsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountSpendsRequest {
    return new CountSpendsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CountSpendsRequest | PlainMessage<CountSpendsRequest> | undefined,
    b: CountSpendsRequest | PlainMessage<CountSpendsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CountSpendsRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.UpdateSpendRequest
 */
export class UpdateSpendRequest extends Message<UpdateSpendRequest> {
  /**
   * @generated from field: mystiko.core.document.v1.Spend spend = 1;
   */
  spend?: Spend;

  constructor(data?: PartialMessage<UpdateSpendRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.UpdateSpendRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'spend', kind: 'message', T: Spend },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSpendRequest {
    return new UpdateSpendRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSpendRequest {
    return new UpdateSpendRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSpendRequest {
    return new UpdateSpendRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateSpendRequest | PlainMessage<UpdateSpendRequest> | undefined,
    b: UpdateSpendRequest | PlainMessage<UpdateSpendRequest> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateSpendRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.UpdateSpendBatchRequest
 */
export class UpdateSpendBatchRequest extends Message<UpdateSpendBatchRequest> {
  /**
   * @generated from field: repeated mystiko.core.document.v1.Spend spends = 1;
   */
  spends: Spend[] = [];

  constructor(data?: PartialMessage<UpdateSpendBatchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.UpdateSpendBatchRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'spends', kind: 'message', T: Spend, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSpendBatchRequest {
    return new UpdateSpendBatchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSpendBatchRequest {
    return new UpdateSpendBatchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSpendBatchRequest {
    return new UpdateSpendBatchRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateSpendBatchRequest | PlainMessage<UpdateSpendBatchRequest> | undefined,
    b: UpdateSpendBatchRequest | PlainMessage<UpdateSpendBatchRequest> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateSpendBatchRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.UpdateSpendByFilterRequest
 */
export class UpdateSpendByFilterRequest extends Message<UpdateSpendByFilterRequest> {
  /**
   * @generated from field: repeated mystiko.api.handler.v1.ColumnValuePair column_values = 1;
   */
  columnValues: ColumnValuePair[] = [];

  /**
   * @generated from field: mystiko.storage.v1.QueryFilter filter = 2;
   */
  filter?: QueryFilter;

  constructor(data?: PartialMessage<UpdateSpendByFilterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.UpdateSpendByFilterRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'column_values', kind: 'message', T: ColumnValuePair, repeated: true },
    { no: 2, name: 'filter', kind: 'message', T: QueryFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSpendByFilterRequest {
    return new UpdateSpendByFilterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSpendByFilterRequest {
    return new UpdateSpendByFilterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSpendByFilterRequest {
    return new UpdateSpendByFilterRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateSpendByFilterRequest | PlainMessage<UpdateSpendByFilterRequest> | undefined,
    b: UpdateSpendByFilterRequest | PlainMessage<UpdateSpendByFilterRequest> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateSpendByFilterRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.UpdateAllSpendRequest
 */
export class UpdateAllSpendRequest extends Message<UpdateAllSpendRequest> {
  /**
   * @generated from field: repeated mystiko.api.handler.v1.ColumnValuePair column_values = 1;
   */
  columnValues: ColumnValuePair[] = [];

  constructor(data?: PartialMessage<UpdateAllSpendRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.UpdateAllSpendRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'column_values', kind: 'message', T: ColumnValuePair, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAllSpendRequest {
    return new UpdateAllSpendRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAllSpendRequest {
    return new UpdateAllSpendRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAllSpendRequest {
    return new UpdateAllSpendRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateAllSpendRequest | PlainMessage<UpdateAllSpendRequest> | undefined,
    b: UpdateAllSpendRequest | PlainMessage<UpdateAllSpendRequest> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateAllSpendRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.DeleteSpendRequest
 */
export class DeleteSpendRequest extends Message<DeleteSpendRequest> {
  /**
   * @generated from field: mystiko.core.document.v1.Spend spend = 1;
   */
  spend?: Spend;

  constructor(data?: PartialMessage<DeleteSpendRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.DeleteSpendRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'spend', kind: 'message', T: Spend },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSpendRequest {
    return new DeleteSpendRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSpendRequest {
    return new DeleteSpendRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSpendRequest {
    return new DeleteSpendRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeleteSpendRequest | PlainMessage<DeleteSpendRequest> | undefined,
    b: DeleteSpendRequest | PlainMessage<DeleteSpendRequest> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteSpendRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.DeleteSpendBatchRequest
 */
export class DeleteSpendBatchRequest extends Message<DeleteSpendBatchRequest> {
  /**
   * @generated from field: repeated mystiko.core.document.v1.Spend spends = 1;
   */
  spends: Spend[] = [];

  constructor(data?: PartialMessage<DeleteSpendBatchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.DeleteSpendBatchRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'spends', kind: 'message', T: Spend, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSpendBatchRequest {
    return new DeleteSpendBatchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSpendBatchRequest {
    return new DeleteSpendBatchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSpendBatchRequest {
    return new DeleteSpendBatchRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeleteSpendBatchRequest | PlainMessage<DeleteSpendBatchRequest> | undefined,
    b: DeleteSpendBatchRequest | PlainMessage<DeleteSpendBatchRequest> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteSpendBatchRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.DeleteSpendByFilterRequest
 */
export class DeleteSpendByFilterRequest extends Message<DeleteSpendByFilterRequest> {
  /**
   * @generated from field: mystiko.storage.v1.QueryFilter filter = 1;
   */
  filter?: QueryFilter;

  constructor(data?: PartialMessage<DeleteSpendByFilterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.DeleteSpendByFilterRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'filter', kind: 'message', T: QueryFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteSpendByFilterRequest {
    return new DeleteSpendByFilterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteSpendByFilterRequest {
    return new DeleteSpendByFilterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteSpendByFilterRequest {
    return new DeleteSpendByFilterRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: DeleteSpendByFilterRequest | PlainMessage<DeleteSpendByFilterRequest> | undefined,
    b: DeleteSpendByFilterRequest | PlainMessage<DeleteSpendByFilterRequest> | undefined,
  ): boolean {
    return proto3.util.equals(DeleteSpendByFilterRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.SpendQuoteResponse
 */
export class SpendQuoteResponse extends Message<SpendQuoteResponse> {
  /**
   * @generated from field: mystiko.core.handler.v1.SpendQuote quote = 1;
   */
  quote?: SpendQuote;

  constructor(data?: PartialMessage<SpendQuoteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.SpendQuoteResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'quote', kind: 'message', T: SpendQuote },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpendQuoteResponse {
    return new SpendQuoteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpendQuoteResponse {
    return new SpendQuoteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpendQuoteResponse {
    return new SpendQuoteResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: SpendQuoteResponse | PlainMessage<SpendQuoteResponse> | undefined,
    b: SpendQuoteResponse | PlainMessage<SpendQuoteResponse> | undefined,
  ): boolean {
    return proto3.util.equals(SpendQuoteResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.SpendSummaryResponse
 */
export class SpendSummaryResponse extends Message<SpendSummaryResponse> {
  /**
   * @generated from field: mystiko.core.handler.v1.SpendSummary summary = 1;
   */
  summary?: SpendSummary;

  constructor(data?: PartialMessage<SpendSummaryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.SpendSummaryResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'summary', kind: 'message', T: SpendSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpendSummaryResponse {
    return new SpendSummaryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpendSummaryResponse {
    return new SpendSummaryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpendSummaryResponse {
    return new SpendSummaryResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: SpendSummaryResponse | PlainMessage<SpendSummaryResponse> | undefined,
    b: SpendSummaryResponse | PlainMessage<SpendSummaryResponse> | undefined,
  ): boolean {
    return proto3.util.equals(SpendSummaryResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.CreateSpendResponse
 */
export class CreateSpendResponse extends Message<CreateSpendResponse> {
  /**
   * @generated from field: mystiko.core.document.v1.Spend spend = 1;
   */
  spend?: Spend;

  constructor(data?: PartialMessage<CreateSpendResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CreateSpendResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'spend', kind: 'message', T: Spend },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateSpendResponse {
    return new CreateSpendResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateSpendResponse {
    return new CreateSpendResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateSpendResponse {
    return new CreateSpendResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateSpendResponse | PlainMessage<CreateSpendResponse> | undefined,
    b: CreateSpendResponse | PlainMessage<CreateSpendResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CreateSpendResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.SendSpendResponse
 */
export class SendSpendResponse extends Message<SendSpendResponse> {
  /**
   * @generated from field: mystiko.core.document.v1.Spend spend = 1;
   */
  spend?: Spend;

  constructor(data?: PartialMessage<SendSpendResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.SendSpendResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'spend', kind: 'message', T: Spend },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendSpendResponse {
    return new SendSpendResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendSpendResponse {
    return new SendSpendResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendSpendResponse {
    return new SendSpendResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: SendSpendResponse | PlainMessage<SendSpendResponse> | undefined,
    b: SendSpendResponse | PlainMessage<SendSpendResponse> | undefined,
  ): boolean {
    return proto3.util.equals(SendSpendResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.FixSpendStatusResponse
 */
export class FixSpendStatusResponse extends Message<FixSpendStatusResponse> {
  /**
   * @generated from field: mystiko.core.document.v1.Spend spend = 1;
   */
  spend?: Spend;

  constructor(data?: PartialMessage<FixSpendStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.FixSpendStatusResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'spend', kind: 'message', T: Spend },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FixSpendStatusResponse {
    return new FixSpendStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FixSpendStatusResponse {
    return new FixSpendStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FixSpendStatusResponse {
    return new FixSpendStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: FixSpendStatusResponse | PlainMessage<FixSpendStatusResponse> | undefined,
    b: FixSpendStatusResponse | PlainMessage<FixSpendStatusResponse> | undefined,
  ): boolean {
    return proto3.util.equals(FixSpendStatusResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.FindSpendsResponse
 */
export class FindSpendsResponse extends Message<FindSpendsResponse> {
  /**
   * @generated from field: repeated mystiko.core.document.v1.Spend spends = 1;
   */
  spends: Spend[] = [];

  constructor(data?: PartialMessage<FindSpendsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.FindSpendsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'spends', kind: 'message', T: Spend, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindSpendsResponse {
    return new FindSpendsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindSpendsResponse {
    return new FindSpendsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindSpendsResponse {
    return new FindSpendsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: FindSpendsResponse | PlainMessage<FindSpendsResponse> | undefined,
    b: FindSpendsResponse | PlainMessage<FindSpendsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(FindSpendsResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.FindOneSpendResponse
 */
export class FindOneSpendResponse extends Message<FindOneSpendResponse> {
  /**
   * @generated from field: mystiko.core.document.v1.Spend spend = 1;
   */
  spend?: Spend;

  constructor(data?: PartialMessage<FindOneSpendResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.FindOneSpendResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'spend', kind: 'message', T: Spend },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindOneSpendResponse {
    return new FindOneSpendResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindOneSpendResponse {
    return new FindOneSpendResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindOneSpendResponse {
    return new FindOneSpendResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: FindOneSpendResponse | PlainMessage<FindOneSpendResponse> | undefined,
    b: FindOneSpendResponse | PlainMessage<FindOneSpendResponse> | undefined,
  ): boolean {
    return proto3.util.equals(FindOneSpendResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.CountSpendsResponse
 */
export class CountSpendsResponse extends Message<CountSpendsResponse> {
  /**
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<CountSpendsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CountSpendsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'count', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountSpendsResponse {
    return new CountSpendsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountSpendsResponse {
    return new CountSpendsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountSpendsResponse {
    return new CountSpendsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CountSpendsResponse | PlainMessage<CountSpendsResponse> | undefined,
    b: CountSpendsResponse | PlainMessage<CountSpendsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CountSpendsResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.UpdateSpendResponse
 */
export class UpdateSpendResponse extends Message<UpdateSpendResponse> {
  /**
   * @generated from field: mystiko.core.document.v1.Spend spend = 1;
   */
  spend?: Spend;

  constructor(data?: PartialMessage<UpdateSpendResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.UpdateSpendResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'spend', kind: 'message', T: Spend },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSpendResponse {
    return new UpdateSpendResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSpendResponse {
    return new UpdateSpendResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSpendResponse {
    return new UpdateSpendResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateSpendResponse | PlainMessage<UpdateSpendResponse> | undefined,
    b: UpdateSpendResponse | PlainMessage<UpdateSpendResponse> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateSpendResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.UpdateSpendBatchResponse
 */
export class UpdateSpendBatchResponse extends Message<UpdateSpendBatchResponse> {
  /**
   * @generated from field: repeated mystiko.core.document.v1.Spend spends = 1;
   */
  spends: Spend[] = [];

  constructor(data?: PartialMessage<UpdateSpendBatchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.UpdateSpendBatchResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'spends', kind: 'message', T: Spend, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSpendBatchResponse {
    return new UpdateSpendBatchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSpendBatchResponse {
    return new UpdateSpendBatchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSpendBatchResponse {
    return new UpdateSpendBatchResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateSpendBatchResponse | PlainMessage<UpdateSpendBatchResponse> | undefined,
    b: UpdateSpendBatchResponse | PlainMessage<UpdateSpendBatchResponse> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateSpendBatchResponse, a, b);
  }
}
