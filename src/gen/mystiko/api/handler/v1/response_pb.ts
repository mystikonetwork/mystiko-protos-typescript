// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file mystiko/api/handler/v1/response.proto (package mystiko.api.handler.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';
import { Wallet } from '../../../core/document/v1/wallet_pb.js';
import { Account } from '../../../core/document/v1/account_pb.js';

/**
 * @generated from message mystiko.api.handler.v1.CreateWalletResponse
 */
export class CreateWalletResponse extends Message<CreateWalletResponse> {
  /**
   * @generated from field: mystiko.core.document.v1.Wallet wallet = 1;
   */
  wallet?: Wallet;

  constructor(data?: PartialMessage<CreateWalletResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CreateWalletResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'wallet', kind: 'message', T: Wallet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWalletResponse {
    return new CreateWalletResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWalletResponse {
    return new CreateWalletResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWalletResponse {
    return new CreateWalletResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateWalletResponse | PlainMessage<CreateWalletResponse> | undefined,
    b: CreateWalletResponse | PlainMessage<CreateWalletResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CreateWalletResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.CheckCurrentResponse
 */
export class CheckCurrentResponse extends Message<CheckCurrentResponse> {
  /**
   * @generated from field: mystiko.core.document.v1.Wallet wallet = 1;
   */
  wallet?: Wallet;

  constructor(data?: PartialMessage<CheckCurrentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CheckCurrentResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'wallet', kind: 'message', T: Wallet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckCurrentResponse {
    return new CheckCurrentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckCurrentResponse {
    return new CheckCurrentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckCurrentResponse {
    return new CheckCurrentResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CheckCurrentResponse | PlainMessage<CheckCurrentResponse> | undefined,
    b: CheckCurrentResponse | PlainMessage<CheckCurrentResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CheckCurrentResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.CheckPasswordResponse
 */
export class CheckPasswordResponse extends Message<CheckPasswordResponse> {
  /**
   * @generated from field: mystiko.core.document.v1.Wallet wallet = 1;
   */
  wallet?: Wallet;

  constructor(data?: PartialMessage<CheckPasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CheckPasswordResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'wallet', kind: 'message', T: Wallet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckPasswordResponse {
    return new CheckPasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckPasswordResponse {
    return new CheckPasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckPasswordResponse {
    return new CheckPasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CheckPasswordResponse | PlainMessage<CheckPasswordResponse> | undefined,
    b: CheckPasswordResponse | PlainMessage<CheckPasswordResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CheckPasswordResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.UpdatePasswordResponse
 */
export class UpdatePasswordResponse extends Message<UpdatePasswordResponse> {
  /**
   * @generated from field: mystiko.core.document.v1.Wallet wallet = 1;
   */
  wallet?: Wallet;

  constructor(data?: PartialMessage<UpdatePasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.UpdatePasswordResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'wallet', kind: 'message', T: Wallet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePasswordResponse {
    return new UpdatePasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePasswordResponse {
    return new UpdatePasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePasswordResponse {
    return new UpdatePasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdatePasswordResponse | PlainMessage<UpdatePasswordResponse> | undefined,
    b: UpdatePasswordResponse | PlainMessage<UpdatePasswordResponse> | undefined,
  ): boolean {
    return proto3.util.equals(UpdatePasswordResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.ExportMnemonicPhraseResponse
 */
export class ExportMnemonicPhraseResponse extends Message<ExportMnemonicPhraseResponse> {
  /**
   * @generated from field: string mnemonic_phrase = 1;
   */
  mnemonicPhrase = '';

  constructor(data?: PartialMessage<ExportMnemonicPhraseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.ExportMnemonicPhraseResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'mnemonic_phrase', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportMnemonicPhraseResponse {
    return new ExportMnemonicPhraseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportMnemonicPhraseResponse {
    return new ExportMnemonicPhraseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ExportMnemonicPhraseResponse {
    return new ExportMnemonicPhraseResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ExportMnemonicPhraseResponse | PlainMessage<ExportMnemonicPhraseResponse> | undefined,
    b: ExportMnemonicPhraseResponse | PlainMessage<ExportMnemonicPhraseResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ExportMnemonicPhraseResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.CreateAccountResponse
 */
export class CreateAccountResponse extends Message<CreateAccountResponse> {
  /**
   * @generated from field: mystiko.core.document.v1.Account account = 1;
   */
  account?: Account;

  constructor(data?: PartialMessage<CreateAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CreateAccountResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'account', kind: 'message', T: Account },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAccountResponse {
    return new CreateAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAccountResponse {
    return new CreateAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAccountResponse {
    return new CreateAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateAccountResponse | PlainMessage<CreateAccountResponse> | undefined,
    b: CreateAccountResponse | PlainMessage<CreateAccountResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CreateAccountResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.CountAccountResponse
 */
export class CountAccountResponse extends Message<CountAccountResponse> {
  /**
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<CountAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CountAccountResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'count', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountAccountResponse {
    return new CountAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountAccountResponse {
    return new CountAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountAccountResponse {
    return new CountAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CountAccountResponse | PlainMessage<CountAccountResponse> | undefined,
    b: CountAccountResponse | PlainMessage<CountAccountResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CountAccountResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.FindAccountResponse
 */
export class FindAccountResponse extends Message<FindAccountResponse> {
  /**
   * @generated from field: repeated mystiko.core.document.v1.Account account = 1;
   */
  account: Account[] = [];

  constructor(data?: PartialMessage<FindAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.FindAccountResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'account', kind: 'message', T: Account, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindAccountResponse {
    return new FindAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindAccountResponse {
    return new FindAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindAccountResponse {
    return new FindAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: FindAccountResponse | PlainMessage<FindAccountResponse> | undefined,
    b: FindAccountResponse | PlainMessage<FindAccountResponse> | undefined,
  ): boolean {
    return proto3.util.equals(FindAccountResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.FindAccountByIdentifierResponse
 */
export class FindAccountByIdentifierResponse extends Message<FindAccountByIdentifierResponse> {
  /**
   * @generated from field: optional mystiko.core.document.v1.Account account = 1;
   */
  account?: Account;

  constructor(data?: PartialMessage<FindAccountByIdentifierResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.FindAccountByIdentifierResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'account', kind: 'message', T: Account, opt: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): FindAccountByIdentifierResponse {
    return new FindAccountByIdentifierResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindAccountByIdentifierResponse {
    return new FindAccountByIdentifierResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): FindAccountByIdentifierResponse {
    return new FindAccountByIdentifierResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: FindAccountByIdentifierResponse | PlainMessage<FindAccountByIdentifierResponse> | undefined,
    b: FindAccountByIdentifierResponse | PlainMessage<FindAccountByIdentifierResponse> | undefined,
  ): boolean {
    return proto3.util.equals(FindAccountByIdentifierResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.UpdateAccountResponse
 */
export class UpdateAccountResponse extends Message<UpdateAccountResponse> {
  /**
   * @generated from field: mystiko.core.document.v1.Account account = 1;
   */
  account?: Account;

  constructor(data?: PartialMessage<UpdateAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.UpdateAccountResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'account', kind: 'message', T: Account },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccountResponse {
    return new UpdateAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccountResponse {
    return new UpdateAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccountResponse {
    return new UpdateAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateAccountResponse | PlainMessage<UpdateAccountResponse> | undefined,
    b: UpdateAccountResponse | PlainMessage<UpdateAccountResponse> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateAccountResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.UpdateEncryptionResponse
 */
export class UpdateEncryptionResponse extends Message<UpdateEncryptionResponse> {
  /**
   * @generated from field: repeated mystiko.core.document.v1.Account account = 1;
   */
  account: Account[] = [];

  constructor(data?: PartialMessage<UpdateEncryptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.UpdateEncryptionResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'account', kind: 'message', T: Account, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEncryptionResponse {
    return new UpdateEncryptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEncryptionResponse {
    return new UpdateEncryptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEncryptionResponse {
    return new UpdateEncryptionResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateEncryptionResponse | PlainMessage<UpdateEncryptionResponse> | undefined,
    b: UpdateEncryptionResponse | PlainMessage<UpdateEncryptionResponse> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateEncryptionResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.ExportSecretKeyResponse
 */
export class ExportSecretKeyResponse extends Message<ExportSecretKeyResponse> {
  /**
   * @generated from field: string secret_key = 1;
   */
  secretKey = '';

  constructor(data?: PartialMessage<ExportSecretKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.ExportSecretKeyResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'secret_key', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportSecretKeyResponse {
    return new ExportSecretKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportSecretKeyResponse {
    return new ExportSecretKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportSecretKeyResponse {
    return new ExportSecretKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ExportSecretKeyResponse | PlainMessage<ExportSecretKeyResponse> | undefined,
    b: ExportSecretKeyResponse | PlainMessage<ExportSecretKeyResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ExportSecretKeyResponse, a, b);
  }
}
