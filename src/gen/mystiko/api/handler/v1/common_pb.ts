// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file mystiko/api/handler/v1/common.proto (package mystiko.api.handler.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { ColumnValue } from '../../../storage/v1/filter_pb.js';

/**
 * column value
 *
 * @generated from message mystiko.api.handler.v1.ColumnValuePair
 */
export class ColumnValuePair extends Message<ColumnValuePair> {
  /**
   * @generated from field: string column = 1;
   */
  column = '';

  /**
   * @generated from field: mystiko.storage.v1.ColumnValue value = 2;
   */
  value?: ColumnValue;

  constructor(data?: PartialMessage<ColumnValuePair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.ColumnValuePair';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'column', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'value', kind: 'message', T: ColumnValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnValuePair {
    return new ColumnValuePair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnValuePair {
    return new ColumnValuePair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnValuePair {
    return new ColumnValuePair().fromJsonString(jsonString, options);
  }

  static equals(
    a: ColumnValuePair | PlainMessage<ColumnValuePair> | undefined,
    b: ColumnValuePair | PlainMessage<ColumnValuePair> | undefined,
  ): boolean {
    return proto3.util.equals(ColumnValuePair, a, b);
  }
}
