// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file mystiko/api/handler/v1/account.proto (package mystiko.api.handler.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';
import { CreateAccountOptions, UpdateAccountOptions } from '../../../core/handler/v1/account_pb.js';
import { QueryFilter } from '../../../storage/v1/filter_pb.js';
import { Account } from '../../../core/document/v1/account_pb.js';

/**
 * @generated from message mystiko.api.handler.v1.CreateAccountRequest
 */
export class CreateAccountRequest extends Message<CreateAccountRequest> {
  /**
   * @generated from field: mystiko.core.handler.v1.CreateAccountOptions options = 1;
   */
  options?: CreateAccountOptions;

  constructor(data?: PartialMessage<CreateAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CreateAccountRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'options', kind: 'message', T: CreateAccountOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAccountRequest {
    return new CreateAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAccountRequest {
    return new CreateAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAccountRequest {
    return new CreateAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateAccountRequest | PlainMessage<CreateAccountRequest> | undefined,
    b: CreateAccountRequest | PlainMessage<CreateAccountRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CreateAccountRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.CountAccountRequest
 */
export class CountAccountRequest extends Message<CountAccountRequest> {
  /**
   * @generated from field: mystiko.storage.v1.QueryFilter filter = 1;
   */
  filter?: QueryFilter;

  constructor(data?: PartialMessage<CountAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CountAccountRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'filter', kind: 'message', T: QueryFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountAccountRequest {
    return new CountAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountAccountRequest {
    return new CountAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountAccountRequest {
    return new CountAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CountAccountRequest | PlainMessage<CountAccountRequest> | undefined,
    b: CountAccountRequest | PlainMessage<CountAccountRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CountAccountRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.FindAccountRequest
 */
export class FindAccountRequest extends Message<FindAccountRequest> {
  /**
   * @generated from field: mystiko.storage.v1.QueryFilter filter = 1;
   */
  filter?: QueryFilter;

  constructor(data?: PartialMessage<FindAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.FindAccountRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'filter', kind: 'message', T: QueryFilter },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindAccountRequest {
    return new FindAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindAccountRequest {
    return new FindAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindAccountRequest {
    return new FindAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: FindAccountRequest | PlainMessage<FindAccountRequest> | undefined,
    b: FindAccountRequest | PlainMessage<FindAccountRequest> | undefined,
  ): boolean {
    return proto3.util.equals(FindAccountRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.FindAccountByIdentifierRequest
 */
export class FindAccountByIdentifierRequest extends Message<FindAccountByIdentifierRequest> {
  /**
   * @generated from field: string identifier = 1;
   */
  identifier = '';

  constructor(data?: PartialMessage<FindAccountByIdentifierRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.FindAccountByIdentifierRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'identifier', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindAccountByIdentifierRequest {
    return new FindAccountByIdentifierRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindAccountByIdentifierRequest {
    return new FindAccountByIdentifierRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): FindAccountByIdentifierRequest {
    return new FindAccountByIdentifierRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: FindAccountByIdentifierRequest | PlainMessage<FindAccountByIdentifierRequest> | undefined,
    b: FindAccountByIdentifierRequest | PlainMessage<FindAccountByIdentifierRequest> | undefined,
  ): boolean {
    return proto3.util.equals(FindAccountByIdentifierRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.UpdateAccountRequest
 */
export class UpdateAccountRequest extends Message<UpdateAccountRequest> {
  /**
   * @generated from field: mystiko.core.handler.v1.UpdateAccountOptions options = 1;
   */
  options?: UpdateAccountOptions;

  /**
   * @generated from field: string identifier = 2;
   */
  identifier = '';

  constructor(data?: PartialMessage<UpdateAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.UpdateAccountRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'options', kind: 'message', T: UpdateAccountOptions },
    { no: 2, name: 'identifier', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccountRequest {
    return new UpdateAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccountRequest {
    return new UpdateAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccountRequest {
    return new UpdateAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateAccountRequest | PlainMessage<UpdateAccountRequest> | undefined,
    b: UpdateAccountRequest | PlainMessage<UpdateAccountRequest> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateAccountRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.UpdateEncryptionRequest
 */
export class UpdateEncryptionRequest extends Message<UpdateEncryptionRequest> {
  /**
   * @generated from field: string old_wallet_password = 1;
   */
  oldWalletPassword = '';

  /**
   * @generated from field: string new_wallet_password = 2;
   */
  newWalletPassword = '';

  constructor(data?: PartialMessage<UpdateEncryptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.UpdateEncryptionRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'old_wallet_password', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'new_wallet_password', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEncryptionRequest {
    return new UpdateEncryptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEncryptionRequest {
    return new UpdateEncryptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEncryptionRequest {
    return new UpdateEncryptionRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateEncryptionRequest | PlainMessage<UpdateEncryptionRequest> | undefined,
    b: UpdateEncryptionRequest | PlainMessage<UpdateEncryptionRequest> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateEncryptionRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.ExportSecretKeyRequest
 */
export class ExportSecretKeyRequest extends Message<ExportSecretKeyRequest> {
  /**
   * @generated from field: string wallet_password = 1;
   */
  walletPassword = '';

  /**
   * @generated from field: string identifier = 2;
   */
  identifier = '';

  constructor(data?: PartialMessage<ExportSecretKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.ExportSecretKeyRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'wallet_password', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'identifier', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportSecretKeyRequest {
    return new ExportSecretKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportSecretKeyRequest {
    return new ExportSecretKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportSecretKeyRequest {
    return new ExportSecretKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ExportSecretKeyRequest | PlainMessage<ExportSecretKeyRequest> | undefined,
    b: ExportSecretKeyRequest | PlainMessage<ExportSecretKeyRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ExportSecretKeyRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.CreateAccountResponse
 */
export class CreateAccountResponse extends Message<CreateAccountResponse> {
  /**
   * @generated from field: mystiko.core.document.v1.Account account = 1;
   */
  account?: Account;

  constructor(data?: PartialMessage<CreateAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CreateAccountResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'account', kind: 'message', T: Account },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAccountResponse {
    return new CreateAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAccountResponse {
    return new CreateAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAccountResponse {
    return new CreateAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateAccountResponse | PlainMessage<CreateAccountResponse> | undefined,
    b: CreateAccountResponse | PlainMessage<CreateAccountResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CreateAccountResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.CountAccountResponse
 */
export class CountAccountResponse extends Message<CountAccountResponse> {
  /**
   * @generated from field: uint64 count = 1;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<CountAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CountAccountResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'count', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountAccountResponse {
    return new CountAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountAccountResponse {
    return new CountAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountAccountResponse {
    return new CountAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CountAccountResponse | PlainMessage<CountAccountResponse> | undefined,
    b: CountAccountResponse | PlainMessage<CountAccountResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CountAccountResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.FindAccountResponse
 */
export class FindAccountResponse extends Message<FindAccountResponse> {
  /**
   * @generated from field: repeated mystiko.core.document.v1.Account account = 1;
   */
  account: Account[] = [];

  constructor(data?: PartialMessage<FindAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.FindAccountResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'account', kind: 'message', T: Account, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FindAccountResponse {
    return new FindAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindAccountResponse {
    return new FindAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FindAccountResponse {
    return new FindAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: FindAccountResponse | PlainMessage<FindAccountResponse> | undefined,
    b: FindAccountResponse | PlainMessage<FindAccountResponse> | undefined,
  ): boolean {
    return proto3.util.equals(FindAccountResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.FindAccountByIdentifierResponse
 */
export class FindAccountByIdentifierResponse extends Message<FindAccountByIdentifierResponse> {
  /**
   * @generated from field: optional mystiko.core.document.v1.Account account = 1;
   */
  account?: Account;

  constructor(data?: PartialMessage<FindAccountByIdentifierResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.FindAccountByIdentifierResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'account', kind: 'message', T: Account, opt: true },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): FindAccountByIdentifierResponse {
    return new FindAccountByIdentifierResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FindAccountByIdentifierResponse {
    return new FindAccountByIdentifierResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): FindAccountByIdentifierResponse {
    return new FindAccountByIdentifierResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: FindAccountByIdentifierResponse | PlainMessage<FindAccountByIdentifierResponse> | undefined,
    b: FindAccountByIdentifierResponse | PlainMessage<FindAccountByIdentifierResponse> | undefined,
  ): boolean {
    return proto3.util.equals(FindAccountByIdentifierResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.UpdateAccountResponse
 */
export class UpdateAccountResponse extends Message<UpdateAccountResponse> {
  /**
   * @generated from field: mystiko.core.document.v1.Account account = 1;
   */
  account?: Account;

  constructor(data?: PartialMessage<UpdateAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.UpdateAccountResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'account', kind: 'message', T: Account },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAccountResponse {
    return new UpdateAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAccountResponse {
    return new UpdateAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAccountResponse {
    return new UpdateAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateAccountResponse | PlainMessage<UpdateAccountResponse> | undefined,
    b: UpdateAccountResponse | PlainMessage<UpdateAccountResponse> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateAccountResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.UpdateEncryptionResponse
 */
export class UpdateEncryptionResponse extends Message<UpdateEncryptionResponse> {
  /**
   * @generated from field: repeated mystiko.core.document.v1.Account account = 1;
   */
  account: Account[] = [];

  constructor(data?: PartialMessage<UpdateEncryptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.UpdateEncryptionResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'account', kind: 'message', T: Account, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEncryptionResponse {
    return new UpdateEncryptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEncryptionResponse {
    return new UpdateEncryptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEncryptionResponse {
    return new UpdateEncryptionResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdateEncryptionResponse | PlainMessage<UpdateEncryptionResponse> | undefined,
    b: UpdateEncryptionResponse | PlainMessage<UpdateEncryptionResponse> | undefined,
  ): boolean {
    return proto3.util.equals(UpdateEncryptionResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.ExportSecretKeyResponse
 */
export class ExportSecretKeyResponse extends Message<ExportSecretKeyResponse> {
  /**
   * @generated from field: string secret_key = 1;
   */
  secretKey = '';

  constructor(data?: PartialMessage<ExportSecretKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.ExportSecretKeyResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'secret_key', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportSecretKeyResponse {
    return new ExportSecretKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportSecretKeyResponse {
    return new ExportSecretKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportSecretKeyResponse {
    return new ExportSecretKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ExportSecretKeyResponse | PlainMessage<ExportSecretKeyResponse> | undefined,
    b: ExportSecretKeyResponse | PlainMessage<ExportSecretKeyResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ExportSecretKeyResponse, a, b);
  }
}
