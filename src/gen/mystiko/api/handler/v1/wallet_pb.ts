// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file mystiko/api/handler/v1/wallet.proto (package mystiko.api.handler.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { CreateWalletOptions } from '../../../core/handler/v1/wallet_pb.js';
import { Wallet } from '../../../core/document/v1/wallet_pb.js';

/**
 * @generated from message mystiko.api.handler.v1.CreateWalletRequest
 */
export class CreateWalletRequest extends Message<CreateWalletRequest> {
  /**
   * @generated from field: mystiko.core.handler.v1.CreateWalletOptions options = 1;
   */
  options?: CreateWalletOptions;

  constructor(data?: PartialMessage<CreateWalletRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CreateWalletRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'options', kind: 'message', T: CreateWalletOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWalletRequest {
    return new CreateWalletRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWalletRequest {
    return new CreateWalletRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWalletRequest {
    return new CreateWalletRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateWalletRequest | PlainMessage<CreateWalletRequest> | undefined,
    b: CreateWalletRequest | PlainMessage<CreateWalletRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CreateWalletRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.CheckPasswordRequest
 */
export class CheckPasswordRequest extends Message<CheckPasswordRequest> {
  /**
   * @generated from field: string password = 1;
   */
  password = '';

  constructor(data?: PartialMessage<CheckPasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CheckPasswordRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'password', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckPasswordRequest {
    return new CheckPasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckPasswordRequest {
    return new CheckPasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckPasswordRequest {
    return new CheckPasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: CheckPasswordRequest | PlainMessage<CheckPasswordRequest> | undefined,
    b: CheckPasswordRequest | PlainMessage<CheckPasswordRequest> | undefined,
  ): boolean {
    return proto3.util.equals(CheckPasswordRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.UpdatePasswordRequest
 */
export class UpdatePasswordRequest extends Message<UpdatePasswordRequest> {
  /**
   * @generated from field: string old_password = 1;
   */
  oldPassword = '';

  /**
   * @generated from field: string new_password = 2;
   */
  newPassword = '';

  constructor(data?: PartialMessage<UpdatePasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.UpdatePasswordRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'old_password', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'new_password', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePasswordRequest {
    return new UpdatePasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePasswordRequest {
    return new UpdatePasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePasswordRequest {
    return new UpdatePasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdatePasswordRequest | PlainMessage<UpdatePasswordRequest> | undefined,
    b: UpdatePasswordRequest | PlainMessage<UpdatePasswordRequest> | undefined,
  ): boolean {
    return proto3.util.equals(UpdatePasswordRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.ExportMnemonicPhraseRequest
 */
export class ExportMnemonicPhraseRequest extends Message<ExportMnemonicPhraseRequest> {
  /**
   * @generated from field: string password = 1;
   */
  password = '';

  constructor(data?: PartialMessage<ExportMnemonicPhraseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.ExportMnemonicPhraseRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'password', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportMnemonicPhraseRequest {
    return new ExportMnemonicPhraseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportMnemonicPhraseRequest {
    return new ExportMnemonicPhraseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExportMnemonicPhraseRequest {
    return new ExportMnemonicPhraseRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ExportMnemonicPhraseRequest | PlainMessage<ExportMnemonicPhraseRequest> | undefined,
    b: ExportMnemonicPhraseRequest | PlainMessage<ExportMnemonicPhraseRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ExportMnemonicPhraseRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.CreateWalletResponse
 */
export class CreateWalletResponse extends Message<CreateWalletResponse> {
  /**
   * @generated from field: mystiko.core.document.v1.Wallet wallet = 1;
   */
  wallet?: Wallet;

  constructor(data?: PartialMessage<CreateWalletResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CreateWalletResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'wallet', kind: 'message', T: Wallet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWalletResponse {
    return new CreateWalletResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWalletResponse {
    return new CreateWalletResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWalletResponse {
    return new CreateWalletResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CreateWalletResponse | PlainMessage<CreateWalletResponse> | undefined,
    b: CreateWalletResponse | PlainMessage<CreateWalletResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CreateWalletResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.CheckCurrentResponse
 */
export class CheckCurrentResponse extends Message<CheckCurrentResponse> {
  /**
   * @generated from field: mystiko.core.document.v1.Wallet wallet = 1;
   */
  wallet?: Wallet;

  constructor(data?: PartialMessage<CheckCurrentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CheckCurrentResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'wallet', kind: 'message', T: Wallet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckCurrentResponse {
    return new CheckCurrentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckCurrentResponse {
    return new CheckCurrentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckCurrentResponse {
    return new CheckCurrentResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CheckCurrentResponse | PlainMessage<CheckCurrentResponse> | undefined,
    b: CheckCurrentResponse | PlainMessage<CheckCurrentResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CheckCurrentResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.CheckPasswordResponse
 */
export class CheckPasswordResponse extends Message<CheckPasswordResponse> {
  /**
   * @generated from field: mystiko.core.document.v1.Wallet wallet = 1;
   */
  wallet?: Wallet;

  constructor(data?: PartialMessage<CheckPasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.CheckPasswordResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'wallet', kind: 'message', T: Wallet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckPasswordResponse {
    return new CheckPasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckPasswordResponse {
    return new CheckPasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckPasswordResponse {
    return new CheckPasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: CheckPasswordResponse | PlainMessage<CheckPasswordResponse> | undefined,
    b: CheckPasswordResponse | PlainMessage<CheckPasswordResponse> | undefined,
  ): boolean {
    return proto3.util.equals(CheckPasswordResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.UpdatePasswordResponse
 */
export class UpdatePasswordResponse extends Message<UpdatePasswordResponse> {
  /**
   * @generated from field: mystiko.core.document.v1.Wallet wallet = 1;
   */
  wallet?: Wallet;

  constructor(data?: PartialMessage<UpdatePasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.UpdatePasswordResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'wallet', kind: 'message', T: Wallet },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePasswordResponse {
    return new UpdatePasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePasswordResponse {
    return new UpdatePasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePasswordResponse {
    return new UpdatePasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: UpdatePasswordResponse | PlainMessage<UpdatePasswordResponse> | undefined,
    b: UpdatePasswordResponse | PlainMessage<UpdatePasswordResponse> | undefined,
  ): boolean {
    return proto3.util.equals(UpdatePasswordResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.handler.v1.ExportMnemonicPhraseResponse
 */
export class ExportMnemonicPhraseResponse extends Message<ExportMnemonicPhraseResponse> {
  /**
   * @generated from field: string mnemonic_phrase = 1;
   */
  mnemonicPhrase = '';

  constructor(data?: PartialMessage<ExportMnemonicPhraseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.handler.v1.ExportMnemonicPhraseResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'mnemonic_phrase', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExportMnemonicPhraseResponse {
    return new ExportMnemonicPhraseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExportMnemonicPhraseResponse {
    return new ExportMnemonicPhraseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ExportMnemonicPhraseResponse {
    return new ExportMnemonicPhraseResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ExportMnemonicPhraseResponse | PlainMessage<ExportMnemonicPhraseResponse> | undefined,
    b: ExportMnemonicPhraseResponse | PlainMessage<ExportMnemonicPhraseResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ExportMnemonicPhraseResponse, a, b);
  }
}
