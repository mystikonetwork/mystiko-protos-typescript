// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file mystiko/api/scanner/v1/request.proto (package mystiko.api.scanner.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';
import { ScanOptions } from '../../../core/scanner/v1/scan_pb.js';
import { ScannerResetOptions } from '../../../core/scanner/v1/reset_pb.js';
import { BalanceOptions } from '../../../core/scanner/v1/balance_pb.js';
import { AssetsOptions } from '../../../core/scanner/v1/asset_pb.js';
import { AssetImportOptions } from '../../../core/scanner/v1/import_pb.js';

/**
 * @generated from message mystiko.api.scanner.v1.ScanRequest
 */
export class ScanRequest extends Message<ScanRequest> {
  /**
   * @generated from field: mystiko.core.scanner.v1.ScanOptions options = 1;
   */
  options?: ScanOptions;

  constructor(data?: PartialMessage<ScanRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.scanner.v1.ScanRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'options', kind: 'message', T: ScanOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScanRequest {
    return new ScanRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScanRequest {
    return new ScanRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScanRequest {
    return new ScanRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ScanRequest | PlainMessage<ScanRequest> | undefined,
    b: ScanRequest | PlainMessage<ScanRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ScanRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.scanner.v1.ScannerResetRequest
 */
export class ScannerResetRequest extends Message<ScannerResetRequest> {
  /**
   * @generated from field: mystiko.core.scanner.v1.ScannerResetOptions options = 1;
   */
  options?: ScannerResetOptions;

  constructor(data?: PartialMessage<ScannerResetRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.scanner.v1.ScannerResetRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'options', kind: 'message', T: ScannerResetOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScannerResetRequest {
    return new ScannerResetRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScannerResetRequest {
    return new ScannerResetRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScannerResetRequest {
    return new ScannerResetRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ScannerResetRequest | PlainMessage<ScannerResetRequest> | undefined,
    b: ScannerResetRequest | PlainMessage<ScannerResetRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ScannerResetRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.scanner.v1.BalanceRequest
 */
export class BalanceRequest extends Message<BalanceRequest> {
  /**
   * @generated from field: mystiko.core.scanner.v1.BalanceOptions options = 1;
   */
  options?: BalanceOptions;

  constructor(data?: PartialMessage<BalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.scanner.v1.BalanceRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'options', kind: 'message', T: BalanceOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BalanceRequest {
    return new BalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BalanceRequest {
    return new BalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BalanceRequest {
    return new BalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: BalanceRequest | PlainMessage<BalanceRequest> | undefined,
    b: BalanceRequest | PlainMessage<BalanceRequest> | undefined,
  ): boolean {
    return proto3.util.equals(BalanceRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.scanner.v1.AssetsRequest
 */
export class AssetsRequest extends Message<AssetsRequest> {
  /**
   * @generated from field: mystiko.core.scanner.v1.AssetsOptions options = 1;
   */
  options?: AssetsOptions;

  constructor(data?: PartialMessage<AssetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.scanner.v1.AssetsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'options', kind: 'message', T: AssetsOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssetsRequest {
    return new AssetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssetsRequest {
    return new AssetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssetsRequest {
    return new AssetsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: AssetsRequest | PlainMessage<AssetsRequest> | undefined,
    b: AssetsRequest | PlainMessage<AssetsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(AssetsRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.scanner.v1.ChainAssetsRequest
 */
export class ChainAssetsRequest extends Message<ChainAssetsRequest> {
  /**
   * @generated from field: uint64 chain_id = 1;
   */
  chainId = protoInt64.zero;

  /**
   * @generated from field: mystiko.core.scanner.v1.AssetsOptions options = 2;
   */
  options?: AssetsOptions;

  constructor(data?: PartialMessage<ChainAssetsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.scanner.v1.ChainAssetsRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'chain_id', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: 'options', kind: 'message', T: AssetsOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChainAssetsRequest {
    return new ChainAssetsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChainAssetsRequest {
    return new ChainAssetsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChainAssetsRequest {
    return new ChainAssetsRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: ChainAssetsRequest | PlainMessage<ChainAssetsRequest> | undefined,
    b: ChainAssetsRequest | PlainMessage<ChainAssetsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(ChainAssetsRequest, a, b);
  }
}

/**
 * @generated from message mystiko.api.scanner.v1.AssetImportRequest
 */
export class AssetImportRequest extends Message<AssetImportRequest> {
  /**
   * @generated from field: mystiko.core.scanner.v1.AssetImportOptions options = 1;
   */
  options?: AssetImportOptions;

  constructor(data?: PartialMessage<AssetImportRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.scanner.v1.AssetImportRequest';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'options', kind: 'message', T: AssetImportOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssetImportRequest {
    return new AssetImportRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssetImportRequest {
    return new AssetImportRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssetImportRequest {
    return new AssetImportRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: AssetImportRequest | PlainMessage<AssetImportRequest> | undefined,
    b: AssetImportRequest | PlainMessage<AssetImportRequest> | undefined,
  ): boolean {
    return proto3.util.equals(AssetImportRequest, a, b);
  }
}
