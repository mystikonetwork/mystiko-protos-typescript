// @generated by protoc-gen-es v1.8.0 with parameter "target=ts"
// @generated from file mystiko/api/scanner/v1/response.proto (package mystiko.api.scanner.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';
import { ScanResult } from '../../../core/scanner/v1/scan_pb.js';
import { ResetResult } from '../../../core/scanner/v1/reset_pb.js';
import { BalanceResult } from '../../../core/scanner/v1/balance_pb.js';
import { AssetsByChain } from '../../../core/scanner/v1/asset_pb.js';
import { AssetImportResult } from '../../../core/scanner/v1/import_pb.js';

/**
 * @generated from message mystiko.api.scanner.v1.ScanResponse
 */
export class ScanResponse extends Message<ScanResponse> {
  /**
   * @generated from field: mystiko.core.scanner.v1.ScanResult result = 1;
   */
  result?: ScanResult;

  constructor(data?: PartialMessage<ScanResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.scanner.v1.ScanResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: ScanResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScanResponse {
    return new ScanResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScanResponse {
    return new ScanResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScanResponse {
    return new ScanResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ScanResponse | PlainMessage<ScanResponse> | undefined,
    b: ScanResponse | PlainMessage<ScanResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ScanResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.scanner.v1.ResetResponse
 */
export class ResetResponse extends Message<ResetResponse> {
  /**
   * @generated from field: mystiko.core.scanner.v1.ResetResult result = 1;
   */
  result?: ResetResult;

  constructor(data?: PartialMessage<ResetResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.scanner.v1.ResetResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: ResetResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetResponse {
    return new ResetResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetResponse {
    return new ResetResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetResponse {
    return new ResetResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ResetResponse | PlainMessage<ResetResponse> | undefined,
    b: ResetResponse | PlainMessage<ResetResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ResetResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.scanner.v1.BalanceResponse
 */
export class BalanceResponse extends Message<BalanceResponse> {
  /**
   * @generated from field: mystiko.core.scanner.v1.BalanceResult result = 1;
   */
  result?: BalanceResult;

  constructor(data?: PartialMessage<BalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.scanner.v1.BalanceResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: BalanceResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BalanceResponse {
    return new BalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BalanceResponse {
    return new BalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BalanceResponse {
    return new BalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: BalanceResponse | PlainMessage<BalanceResponse> | undefined,
    b: BalanceResponse | PlainMessage<BalanceResponse> | undefined,
  ): boolean {
    return proto3.util.equals(BalanceResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.scanner.v1.AssetsResponse
 */
export class AssetsResponse extends Message<AssetsResponse> {
  /**
   * @generated from field: repeated mystiko.core.scanner.v1.AssetsByChain results = 1;
   */
  results: AssetsByChain[] = [];

  constructor(data?: PartialMessage<AssetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.scanner.v1.AssetsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'results', kind: 'message', T: AssetsByChain, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssetsResponse {
    return new AssetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssetsResponse {
    return new AssetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssetsResponse {
    return new AssetsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: AssetsResponse | PlainMessage<AssetsResponse> | undefined,
    b: AssetsResponse | PlainMessage<AssetsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(AssetsResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.scanner.v1.ChainAssetsResponse
 */
export class ChainAssetsResponse extends Message<ChainAssetsResponse> {
  /**
   * @generated from field: optional mystiko.core.scanner.v1.AssetsByChain result = 1;
   */
  result?: AssetsByChain;

  constructor(data?: PartialMessage<ChainAssetsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.scanner.v1.ChainAssetsResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: AssetsByChain, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChainAssetsResponse {
    return new ChainAssetsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChainAssetsResponse {
    return new ChainAssetsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChainAssetsResponse {
    return new ChainAssetsResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: ChainAssetsResponse | PlainMessage<ChainAssetsResponse> | undefined,
    b: ChainAssetsResponse | PlainMessage<ChainAssetsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(ChainAssetsResponse, a, b);
  }
}

/**
 * @generated from message mystiko.api.scanner.v1.AssetImportResponse
 */
export class AssetImportResponse extends Message<AssetImportResponse> {
  /**
   * @generated from field: mystiko.core.scanner.v1.AssetImportResult result = 1;
   */
  result?: AssetImportResult;

  constructor(data?: PartialMessage<AssetImportResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'mystiko.api.scanner.v1.AssetImportResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'result', kind: 'message', T: AssetImportResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AssetImportResponse {
    return new AssetImportResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AssetImportResponse {
    return new AssetImportResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AssetImportResponse {
    return new AssetImportResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: AssetImportResponse | PlainMessage<AssetImportResponse> | undefined,
    b: AssetImportResponse | PlainMessage<AssetImportResponse> | undefined,
  ): boolean {
    return proto3.util.equals(AssetImportResponse, a, b);
  }
}
